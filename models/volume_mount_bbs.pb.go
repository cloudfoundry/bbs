// Code generated by protoc-gen-go-bbs. DO NOT EDIT.
// versions:
// - protoc-gen-go-bbs v0.0.1
// - protoc            v5.27.0--rc1
// source: volume_mount.proto

package models

// Prevent copylock errors when using ProtoSharedDevice directly
type SharedDevice struct {
	VolumeId    string
	MountConfig string
}

func (x *SharedDevice) ToProto() *ProtoSharedDevice {
	proto := &ProtoSharedDevice{
		VolumeId:    x.VolumeId,
		MountConfig: x.MountConfig,
	}
	return proto
}

func SharedDeviceProtoMap(values []*SharedDevice) []*ProtoSharedDevice {
	result := make([]*ProtoSharedDevice, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}

// Prevent copylock errors when using ProtoVolumeMount directly
type VolumeMount struct {
	Driver       string
	ContainerDir string
	Mode         string
	Shared       *SharedDevice
}

func (x *VolumeMount) ToProto() *ProtoVolumeMount {
	proto := &ProtoVolumeMount{
		Driver:       x.Driver,
		ContainerDir: x.ContainerDir,
		Mode:         x.Mode,
		Shared:       x.Shared.ToProto(),
	}
	return proto
}

func VolumeMountProtoMap(values []*VolumeMount) []*ProtoVolumeMount {
	result := make([]*ProtoVolumeMount, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}

// Prevent copylock errors when using ProtoVolumePlacement directly
type VolumePlacement struct {
	DriverNames []string
}

func (x *VolumePlacement) ToProto() *ProtoVolumePlacement {
	proto := &ProtoVolumePlacement{
		DriverNames: x.DriverNames,
	}
	return proto
}

func VolumePlacementProtoMap(values []*VolumePlacement) []*ProtoVolumePlacement {
	result := make([]*ProtoVolumePlacement, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}
