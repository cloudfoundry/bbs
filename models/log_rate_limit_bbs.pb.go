// Code generated by protoc-gen-go-bbs. DO NOT EDIT.
// versions:
// - protoc-gen-go-bbs v0.0.1
// - protoc            v5.29.3
// source: log_rate_limit.proto

package models

// Prevent copylock errors when using ProtoLogRateLimit directly
type LogRateLimit struct {
	BytesPerSecond int64 `json:"bytes_per_second,omitempty"`
}

func (this *LogRateLimit) Equal(that interface{}) bool {

	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogRateLimit)
	if !ok {
		that2, ok := that.(LogRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}

	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}

	if this.BytesPerSecond != that1.BytesPerSecond {
		return false
	}
	return true
}
func (m *LogRateLimit) GetBytesPerSecond() int64 {
	if m != nil {
		return m.BytesPerSecond
	}
	var defaultValue int64
	defaultValue = 0
	return defaultValue
}
func (m *LogRateLimit) SetBytesPerSecond(value int64) {
	if m != nil {
		m.BytesPerSecond = value
	}
}
func (x *LogRateLimit) ToProto() *ProtoLogRateLimit {
	if x == nil {
		return nil
	}

	proto := &ProtoLogRateLimit{
		BytesPerSecond: x.BytesPerSecond,
	}
	return proto
}

func (x *ProtoLogRateLimit) FromProto() *LogRateLimit {
	if x == nil {
		return nil
	}

	copysafe := &LogRateLimit{
		BytesPerSecond: x.BytesPerSecond,
	}
	return copysafe
}

func LogRateLimitToProtoSlice(values []*LogRateLimit) []*ProtoLogRateLimit {
	if values == nil {
		return nil
	}
	result := make([]*ProtoLogRateLimit, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}

func LogRateLimitFromProtoSlice(values []*ProtoLogRateLimit) []*LogRateLimit {
	if values == nil {
		return nil
	}
	result := make([]*LogRateLimit, len(values))
	for i, val := range values {
		result[i] = val.FromProto()
	}
	return result
}
