// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.3
// source: desired_lrp.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DesiredLRPSchedulingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredLrpKey      *DesiredLRPKey      `protobuf:"bytes,1,opt,name=desired_lrp_key,json=desiredLrpKey,proto3" json:"desired_lrp_key,omitempty"`
	Annotation         string              `protobuf:"bytes,2,opt,name=annotation,proto3" json:"annotation,omitempty"`
	Instances          int32               `protobuf:"varint,3,opt,name=instances,proto3" json:"instances,omitempty"`
	DesiredLrpResource *DesiredLRPResource `protobuf:"bytes,4,opt,name=desired_lrp_resource,json=desiredLrpResource,proto3" json:"desired_lrp_resource,omitempty"`
	Routes             *ProtoRoutes        `protobuf:"bytes,5,opt,name=routes,proto3" json:"routes,omitempty"`
	ModificationTag    *ModificationTag    `protobuf:"bytes,6,opt,name=modification_tag,json=modificationTag,proto3" json:"modification_tag,omitempty"`
	VolumePlacement    *VolumePlacement    `protobuf:"bytes,7,opt,name=volume_placement,json=volumePlacement,proto3" json:"volume_placement,omitempty"`
	PlacementTags      []string            `protobuf:"bytes,8,rep,name=PlacementTags,json=placement_tags,proto3" json:"PlacementTags,omitempty"`
}

func (x *DesiredLRPSchedulingInfo) Reset() {
	*x = DesiredLRPSchedulingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desired_lrp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DesiredLRPSchedulingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DesiredLRPSchedulingInfo) ProtoMessage() {}

func (x *DesiredLRPSchedulingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_desired_lrp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DesiredLRPSchedulingInfo.ProtoReflect.Descriptor instead.
func (*DesiredLRPSchedulingInfo) Descriptor() ([]byte, []int) {
	return file_desired_lrp_proto_rawDescGZIP(), []int{0}
}

func (x *DesiredLRPSchedulingInfo) GetDesiredLrpKey() *DesiredLRPKey {
	if x != nil {
		return x.DesiredLrpKey
	}
	return nil
}

func (x *DesiredLRPSchedulingInfo) GetAnnotation() string {
	if x != nil {
		return x.Annotation
	}
	return ""
}

func (x *DesiredLRPSchedulingInfo) GetInstances() int32 {
	if x != nil {
		return x.Instances
	}
	return 0
}

func (x *DesiredLRPSchedulingInfo) GetDesiredLrpResource() *DesiredLRPResource {
	if x != nil {
		return x.DesiredLrpResource
	}
	return nil
}

func (x *DesiredLRPSchedulingInfo) GetRoutes() *ProtoRoutes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *DesiredLRPSchedulingInfo) GetModificationTag() *ModificationTag {
	if x != nil {
		return x.ModificationTag
	}
	return nil
}

func (x *DesiredLRPSchedulingInfo) GetVolumePlacement() *VolumePlacement {
	if x != nil {
		return x.VolumePlacement
	}
	return nil
}

func (x *DesiredLRPSchedulingInfo) GetPlacementTags() []string {
	if x != nil {
		return x.PlacementTags
	}
	return nil
}

type DesiredLRPRunInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredLrpKey        *DesiredLRPKey         `protobuf:"bytes,1,opt,name=desired_lrp_key,json=desiredLrpKey,proto3" json:"desired_lrp_key,omitempty"`
	EnvironmentVariables []*EnvironmentVariable `protobuf:"bytes,2,rep,name=environment_variables,json=env,proto3" json:"environment_variables,omitempty"`
	Setup                *Action                `protobuf:"bytes,3,opt,name=setup,proto3" json:"setup,omitempty"`
	Action               *Action                `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	Monitor              *Action                `protobuf:"bytes,5,opt,name=monitor,proto3" json:"monitor,omitempty"`
	// Deprecated: Marked as deprecated in desired_lrp.proto.
	DeprecatedStartTimeoutS uint32               `protobuf:"varint,6,opt,name=deprecated_start_timeout_s,json=start_timeout,proto3" json:"deprecated_start_timeout_s,omitempty"`
	Privileged              bool                 `protobuf:"varint,7,opt,name=privileged,proto3" json:"privileged,omitempty"`
	CpuWeight               uint32               `protobuf:"varint,8,opt,name=cpu_weight,proto3" json:"cpu_weight,omitempty"`
	Ports                   []uint32             `protobuf:"varint,9,rep,name=ports,proto3" json:"ports,omitempty"`
	EgressRules             []*SecurityGroupRule `protobuf:"bytes,10,rep,name=egress_rules,json=egressRules,proto3" json:"egress_rules,omitempty"`
	LogSource               string               `protobuf:"bytes,11,opt,name=log_source,proto3" json:"log_source,omitempty"`
	// Deprecated: Marked as deprecated in desired_lrp.proto.
	MetricsGuid        string              `protobuf:"bytes,12,opt,name=metrics_guid,proto3" json:"metrics_guid,omitempty"`
	CreatedAt          int64               `protobuf:"varint,13,opt,name=created_at,proto3" json:"created_at,omitempty"`
	CachedDependencies []*CachedDependency `protobuf:"bytes,14,rep,name=cached_dependencies,json=cachedDependencies,proto3" json:"cached_dependencies,omitempty"`
	// Deprecated: Marked as deprecated in desired_lrp.proto.
	LegacyDownloadUser            string                     `protobuf:"bytes,15,opt,name=legacy_download_user,json=legacyDownloadUser,proto3" json:"legacy_download_user,omitempty"`
	TrustedSystemCertificatesPath string                     `protobuf:"bytes,16,opt,name=trusted_system_certificates_path,json=trustedSystemCertificatesPath,proto3" json:"trusted_system_certificates_path,omitempty"`
	VolumeMounts                  []*VolumeMount             `protobuf:"bytes,17,rep,name=volume_mounts,json=volumeMounts,proto3" json:"volume_mounts,omitempty"`
	Network                       *Network                   `protobuf:"bytes,18,opt,name=network,proto3" json:"network,omitempty"`
	StartTimeoutMs                int64                      `protobuf:"varint,19,opt,name=start_timeout_ms,proto3" json:"start_timeout_ms,omitempty"`
	CertificateProperties         *CertificateProperties     `protobuf:"bytes,20,opt,name=certificate_properties,json=certificateProperties,proto3,oneof" json:"certificate_properties,omitempty"`
	ImageUsername                 string                     `protobuf:"bytes,21,opt,name=image_username,json=imageUsername,proto3" json:"image_username,omitempty"`
	ImagePassword                 string                     `protobuf:"bytes,22,opt,name=image_password,json=imagePassword,proto3" json:"image_password,omitempty"`
	CheckDefinition               *CheckDefinition           `protobuf:"bytes,23,opt,name=check_definition,json=checkDefinition,proto3" json:"check_definition,omitempty"`
	ImageLayers                   []*ImageLayer              `protobuf:"bytes,24,rep,name=image_layers,json=imageLayers,proto3" json:"image_layers,omitempty"`
	MetricTags                    map[string]*MetricTagValue `protobuf:"bytes,25,rep,name=metric_tags,json=metricTags,proto3" json:"metric_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Sidecars                      []*Sidecar                 `protobuf:"bytes,26,rep,name=sidecars,proto3" json:"sidecars,omitempty"`
	LogRateLimit                  *LogRateLimit              `protobuf:"bytes,27,opt,name=log_rate_limit,json=logRateLimit,proto3" json:"log_rate_limit,omitempty"`
}

func (x *DesiredLRPRunInfo) Reset() {
	*x = DesiredLRPRunInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desired_lrp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DesiredLRPRunInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DesiredLRPRunInfo) ProtoMessage() {}

func (x *DesiredLRPRunInfo) ProtoReflect() protoreflect.Message {
	mi := &file_desired_lrp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DesiredLRPRunInfo.ProtoReflect.Descriptor instead.
func (*DesiredLRPRunInfo) Descriptor() ([]byte, []int) {
	return file_desired_lrp_proto_rawDescGZIP(), []int{1}
}

func (x *DesiredLRPRunInfo) GetDesiredLrpKey() *DesiredLRPKey {
	if x != nil {
		return x.DesiredLrpKey
	}
	return nil
}

func (x *DesiredLRPRunInfo) GetEnvironmentVariables() []*EnvironmentVariable {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

func (x *DesiredLRPRunInfo) GetSetup() *Action {
	if x != nil {
		return x.Setup
	}
	return nil
}

func (x *DesiredLRPRunInfo) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *DesiredLRPRunInfo) GetMonitor() *Action {
	if x != nil {
		return x.Monitor
	}
	return nil
}

// Deprecated: Marked as deprecated in desired_lrp.proto.
func (x *DesiredLRPRunInfo) GetDeprecatedStartTimeoutS() uint32 {
	if x != nil {
		return x.DeprecatedStartTimeoutS
	}
	return 0
}

func (x *DesiredLRPRunInfo) GetPrivileged() bool {
	if x != nil {
		return x.Privileged
	}
	return false
}

func (x *DesiredLRPRunInfo) GetCpuWeight() uint32 {
	if x != nil {
		return x.CpuWeight
	}
	return 0
}

func (x *DesiredLRPRunInfo) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *DesiredLRPRunInfo) GetEgressRules() []*SecurityGroupRule {
	if x != nil {
		return x.EgressRules
	}
	return nil
}

func (x *DesiredLRPRunInfo) GetLogSource() string {
	if x != nil {
		return x.LogSource
	}
	return ""
}

// Deprecated: Marked as deprecated in desired_lrp.proto.
func (x *DesiredLRPRunInfo) GetMetricsGuid() string {
	if x != nil {
		return x.MetricsGuid
	}
	return ""
}

func (x *DesiredLRPRunInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *DesiredLRPRunInfo) GetCachedDependencies() []*CachedDependency {
	if x != nil {
		return x.CachedDependencies
	}
	return nil
}

// Deprecated: Marked as deprecated in desired_lrp.proto.
func (x *DesiredLRPRunInfo) GetLegacyDownloadUser() string {
	if x != nil {
		return x.LegacyDownloadUser
	}
	return ""
}

func (x *DesiredLRPRunInfo) GetTrustedSystemCertificatesPath() string {
	if x != nil {
		return x.TrustedSystemCertificatesPath
	}
	return ""
}

func (x *DesiredLRPRunInfo) GetVolumeMounts() []*VolumeMount {
	if x != nil {
		return x.VolumeMounts
	}
	return nil
}

func (x *DesiredLRPRunInfo) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *DesiredLRPRunInfo) GetStartTimeoutMs() int64 {
	if x != nil {
		return x.StartTimeoutMs
	}
	return 0
}

func (x *DesiredLRPRunInfo) GetCertificateProperties() *CertificateProperties {
	if x != nil {
		return x.CertificateProperties
	}
	return nil
}

func (x *DesiredLRPRunInfo) GetImageUsername() string {
	if x != nil {
		return x.ImageUsername
	}
	return ""
}

func (x *DesiredLRPRunInfo) GetImagePassword() string {
	if x != nil {
		return x.ImagePassword
	}
	return ""
}

func (x *DesiredLRPRunInfo) GetCheckDefinition() *CheckDefinition {
	if x != nil {
		return x.CheckDefinition
	}
	return nil
}

func (x *DesiredLRPRunInfo) GetImageLayers() []*ImageLayer {
	if x != nil {
		return x.ImageLayers
	}
	return nil
}

func (x *DesiredLRPRunInfo) GetMetricTags() map[string]*MetricTagValue {
	if x != nil {
		return x.MetricTags
	}
	return nil
}

func (x *DesiredLRPRunInfo) GetSidecars() []*Sidecar {
	if x != nil {
		return x.Sidecars
	}
	return nil
}

func (x *DesiredLRPRunInfo) GetLogRateLimit() *LogRateLimit {
	if x != nil {
		return x.LogRateLimit
	}
	return nil
}

// helper message for marshalling routes
type ProtoRoutes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes map[string][]byte `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProtoRoutes) Reset() {
	*x = ProtoRoutes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desired_lrp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoRoutes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoRoutes) ProtoMessage() {}

func (x *ProtoRoutes) ProtoReflect() protoreflect.Message {
	mi := &file_desired_lrp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoRoutes.ProtoReflect.Descriptor instead.
func (*ProtoRoutes) Descriptor() ([]byte, []int) {
	return file_desired_lrp_proto_rawDescGZIP(), []int{2}
}

func (x *ProtoRoutes) GetRoutes() map[string][]byte {
	if x != nil {
		return x.Routes
	}
	return nil
}

type DesiredLRPUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OptionalInstances:
	//
	//	*DesiredLRPUpdate_Instances
	OptionalInstances isDesiredLRPUpdate_OptionalInstances `protobuf_oneof:"optional_instances"`
	Routes            *ProtoRoutes                         `protobuf:"bytes,2,opt,name=routes,proto3,oneof" json:"routes,omitempty"`
	// Types that are assignable to OptionalAnnotation:
	//
	//	*DesiredLRPUpdate_Annotation
	OptionalAnnotation isDesiredLRPUpdate_OptionalAnnotation `protobuf_oneof:"optional_annotation"`
	MetricTags         map[string]*MetricTagValue            `protobuf:"bytes,4,rep,name=metric_tags,json=metricTags,proto3" json:"metric_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DesiredLRPUpdate) Reset() {
	*x = DesiredLRPUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desired_lrp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DesiredLRPUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DesiredLRPUpdate) ProtoMessage() {}

func (x *DesiredLRPUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_desired_lrp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DesiredLRPUpdate.ProtoReflect.Descriptor instead.
func (*DesiredLRPUpdate) Descriptor() ([]byte, []int) {
	return file_desired_lrp_proto_rawDescGZIP(), []int{3}
}

func (m *DesiredLRPUpdate) GetOptionalInstances() isDesiredLRPUpdate_OptionalInstances {
	if m != nil {
		return m.OptionalInstances
	}
	return nil
}

func (x *DesiredLRPUpdate) GetInstances() int32 {
	if x, ok := x.GetOptionalInstances().(*DesiredLRPUpdate_Instances); ok {
		return x.Instances
	}
	return 0
}

func (x *DesiredLRPUpdate) GetRoutes() *ProtoRoutes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (m *DesiredLRPUpdate) GetOptionalAnnotation() isDesiredLRPUpdate_OptionalAnnotation {
	if m != nil {
		return m.OptionalAnnotation
	}
	return nil
}

func (x *DesiredLRPUpdate) GetAnnotation() string {
	if x, ok := x.GetOptionalAnnotation().(*DesiredLRPUpdate_Annotation); ok {
		return x.Annotation
	}
	return ""
}

func (x *DesiredLRPUpdate) GetMetricTags() map[string]*MetricTagValue {
	if x != nil {
		return x.MetricTags
	}
	return nil
}

type isDesiredLRPUpdate_OptionalInstances interface {
	isDesiredLRPUpdate_OptionalInstances()
}

type DesiredLRPUpdate_Instances struct {
	Instances int32 `protobuf:"varint,1,opt,name=instances,proto3,oneof"`
}

func (*DesiredLRPUpdate_Instances) isDesiredLRPUpdate_OptionalInstances() {}

type isDesiredLRPUpdate_OptionalAnnotation interface {
	isDesiredLRPUpdate_OptionalAnnotation()
}

type DesiredLRPUpdate_Annotation struct {
	Annotation string `protobuf:"bytes,3,opt,name=annotation,proto3,oneof"`
}

func (*DesiredLRPUpdate_Annotation) isDesiredLRPUpdate_OptionalAnnotation() {}

type DesiredLRPKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessGuid string `protobuf:"bytes,1,opt,name=process_guid,proto3" json:"process_guid,omitempty"`
	Domain      string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	LogGuid     string `protobuf:"bytes,3,opt,name=log_guid,proto3" json:"log_guid,omitempty"`
}

func (x *DesiredLRPKey) Reset() {
	*x = DesiredLRPKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desired_lrp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DesiredLRPKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DesiredLRPKey) ProtoMessage() {}

func (x *DesiredLRPKey) ProtoReflect() protoreflect.Message {
	mi := &file_desired_lrp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DesiredLRPKey.ProtoReflect.Descriptor instead.
func (*DesiredLRPKey) Descriptor() ([]byte, []int) {
	return file_desired_lrp_proto_rawDescGZIP(), []int{4}
}

func (x *DesiredLRPKey) GetProcessGuid() string {
	if x != nil {
		return x.ProcessGuid
	}
	return ""
}

func (x *DesiredLRPKey) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DesiredLRPKey) GetLogGuid() string {
	if x != nil {
		return x.LogGuid
	}
	return ""
}

type DesiredLRPResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemoryMb int32  `protobuf:"varint,1,opt,name=memory_mb,proto3" json:"memory_mb,omitempty"`
	DiskMb   int32  `protobuf:"varint,2,opt,name=disk_mb,proto3" json:"disk_mb,omitempty"`
	RootFs   string `protobuf:"bytes,3,opt,name=root_fs,json=rootfs,proto3" json:"root_fs,omitempty"`
	MaxPids  int32  `protobuf:"varint,4,opt,name=max_pids,proto3" json:"max_pids,omitempty"`
}

func (x *DesiredLRPResource) Reset() {
	*x = DesiredLRPResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desired_lrp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DesiredLRPResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DesiredLRPResource) ProtoMessage() {}

func (x *DesiredLRPResource) ProtoReflect() protoreflect.Message {
	mi := &file_desired_lrp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DesiredLRPResource.ProtoReflect.Descriptor instead.
func (*DesiredLRPResource) Descriptor() ([]byte, []int) {
	return file_desired_lrp_proto_rawDescGZIP(), []int{5}
}

func (x *DesiredLRPResource) GetMemoryMb() int32 {
	if x != nil {
		return x.MemoryMb
	}
	return 0
}

func (x *DesiredLRPResource) GetDiskMb() int32 {
	if x != nil {
		return x.DiskMb
	}
	return 0
}

func (x *DesiredLRPResource) GetRootFs() string {
	if x != nil {
		return x.RootFs
	}
	return ""
}

func (x *DesiredLRPResource) GetMaxPids() int32 {
	if x != nil {
		return x.MaxPids
	}
	return 0
}

type DesiredLRP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessGuid          string                 `protobuf:"bytes,1,opt,name=process_guid,proto3" json:"process_guid,omitempty"`
	Domain               string                 `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	RootFs               string                 `protobuf:"bytes,3,opt,name=root_fs,json=rootfs,proto3" json:"root_fs,omitempty"`
	Instances            int32                  `protobuf:"varint,4,opt,name=instances,proto3" json:"instances,omitempty"`
	EnvironmentVariables []*EnvironmentVariable `protobuf:"bytes,5,rep,name=environment_variables,json=env,proto3" json:"environment_variables,omitempty"`
	Setup                *Action                `protobuf:"bytes,6,opt,name=setup,proto3" json:"setup,omitempty"`
	Action               *Action                `protobuf:"bytes,7,opt,name=action,proto3" json:"action,omitempty"`
	StartTimeoutMs       int64                  `protobuf:"varint,27,opt,name=start_timeout_ms,proto3" json:"start_timeout_ms,omitempty"`
	// Deprecated: Marked as deprecated in desired_lrp.proto.
	DeprecatedStartTimeoutS uint32       `protobuf:"varint,8,opt,name=deprecated_start_timeout_s,json=deprecated_timeout_ns,proto3" json:"deprecated_start_timeout_s,omitempty"`
	Monitor                 *Action      `protobuf:"bytes,9,opt,name=monitor,proto3" json:"monitor,omitempty"`
	DiskMb                  int32        `protobuf:"varint,10,opt,name=disk_mb,proto3" json:"disk_mb,omitempty"`
	MemoryMb                int32        `protobuf:"varint,11,opt,name=memory_mb,proto3" json:"memory_mb,omitempty"`
	CpuWeight               uint32       `protobuf:"varint,12,opt,name=cpu_weight,proto3" json:"cpu_weight,omitempty"`
	Privileged              bool         `protobuf:"varint,13,opt,name=privileged,proto3" json:"privileged,omitempty"`
	Ports                   []uint32     `protobuf:"varint,14,rep,name=ports,proto3" json:"ports,omitempty"`
	Routes                  *ProtoRoutes `protobuf:"bytes,15,opt,name=routes,proto3,oneof" json:"routes,omitempty"`
	LogSource               string       `protobuf:"bytes,16,opt,name=log_source,proto3" json:"log_source,omitempty"`
	LogGuid                 string       `protobuf:"bytes,17,opt,name=log_guid,proto3" json:"log_guid,omitempty"`
	// Deprecated: Marked as deprecated in desired_lrp.proto.
	MetricsGuid        string               `protobuf:"bytes,18,opt,name=metrics_guid,proto3" json:"metrics_guid,omitempty"`
	Annotation         string               `protobuf:"bytes,19,opt,name=annotation,proto3" json:"annotation,omitempty"`
	EgressRules        []*SecurityGroupRule `protobuf:"bytes,20,rep,name=egress_rules,json=egressRules,proto3" json:"egress_rules,omitempty"`
	ModificationTag    *ModificationTag     `protobuf:"bytes,21,opt,name=modification_tag,json=modificationTag,proto3" json:"modification_tag,omitempty"`
	CachedDependencies []*CachedDependency  `protobuf:"bytes,22,rep,name=cached_dependencies,json=cachedDependencies,proto3" json:"cached_dependencies,omitempty"`
	// Deprecated: Marked as deprecated in desired_lrp.proto.
	LegacyDownloadUser            string                     `protobuf:"bytes,23,opt,name=legacy_download_user,json=legacyDownloadUser,proto3" json:"legacy_download_user,omitempty"`
	TrustedSystemCertificatesPath string                     `protobuf:"bytes,24,opt,name=trusted_system_certificates_path,json=trustedSystemCertificatesPath,proto3" json:"trusted_system_certificates_path,omitempty"`
	VolumeMounts                  []*VolumeMount             `protobuf:"bytes,25,rep,name=volume_mounts,json=volumeMounts,proto3" json:"volume_mounts,omitempty"`
	Network                       *Network                   `protobuf:"bytes,26,opt,name=network,proto3" json:"network,omitempty"`
	PlacementTags                 []string                   `protobuf:"bytes,28,rep,name=PlacementTags,json=placement_tags,proto3" json:"PlacementTags,omitempty"`
	MaxPids                       int32                      `protobuf:"varint,29,opt,name=max_pids,proto3" json:"max_pids,omitempty"`
	CertificateProperties         *CertificateProperties     `protobuf:"bytes,30,opt,name=certificate_properties,json=certificateProperties,proto3,oneof" json:"certificate_properties,omitempty"`
	ImageUsername                 string                     `protobuf:"bytes,31,opt,name=image_username,json=imageUsername,proto3" json:"image_username,omitempty"`
	ImagePassword                 string                     `protobuf:"bytes,32,opt,name=image_password,json=imagePassword,proto3" json:"image_password,omitempty"`
	CheckDefinition               *CheckDefinition           `protobuf:"bytes,33,opt,name=check_definition,json=checkDefinition,proto3" json:"check_definition,omitempty"`
	ImageLayers                   []*ImageLayer              `protobuf:"bytes,34,rep,name=image_layers,json=imageLayers,proto3" json:"image_layers,omitempty"`
	MetricTags                    map[string]*MetricTagValue `protobuf:"bytes,35,rep,name=metric_tags,json=metricTags,proto3" json:"metric_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Sidecars                      []*Sidecar                 `protobuf:"bytes,36,rep,name=sidecars,proto3" json:"sidecars,omitempty"`
	LogRateLimit                  *LogRateLimit              `protobuf:"bytes,37,opt,name=log_rate_limit,json=logRateLimit,proto3" json:"log_rate_limit,omitempty"`
}

func (x *DesiredLRP) Reset() {
	*x = DesiredLRP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desired_lrp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DesiredLRP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DesiredLRP) ProtoMessage() {}

func (x *DesiredLRP) ProtoReflect() protoreflect.Message {
	mi := &file_desired_lrp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DesiredLRP.ProtoReflect.Descriptor instead.
func (*DesiredLRP) Descriptor() ([]byte, []int) {
	return file_desired_lrp_proto_rawDescGZIP(), []int{6}
}

func (x *DesiredLRP) GetProcessGuid() string {
	if x != nil {
		return x.ProcessGuid
	}
	return ""
}

func (x *DesiredLRP) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DesiredLRP) GetRootFs() string {
	if x != nil {
		return x.RootFs
	}
	return ""
}

func (x *DesiredLRP) GetInstances() int32 {
	if x != nil {
		return x.Instances
	}
	return 0
}

func (x *DesiredLRP) GetEnvironmentVariables() []*EnvironmentVariable {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

func (x *DesiredLRP) GetSetup() *Action {
	if x != nil {
		return x.Setup
	}
	return nil
}

func (x *DesiredLRP) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *DesiredLRP) GetStartTimeoutMs() int64 {
	if x != nil {
		return x.StartTimeoutMs
	}
	return 0
}

// Deprecated: Marked as deprecated in desired_lrp.proto.
func (x *DesiredLRP) GetDeprecatedStartTimeoutS() uint32 {
	if x != nil {
		return x.DeprecatedStartTimeoutS
	}
	return 0
}

func (x *DesiredLRP) GetMonitor() *Action {
	if x != nil {
		return x.Monitor
	}
	return nil
}

func (x *DesiredLRP) GetDiskMb() int32 {
	if x != nil {
		return x.DiskMb
	}
	return 0
}

func (x *DesiredLRP) GetMemoryMb() int32 {
	if x != nil {
		return x.MemoryMb
	}
	return 0
}

func (x *DesiredLRP) GetCpuWeight() uint32 {
	if x != nil {
		return x.CpuWeight
	}
	return 0
}

func (x *DesiredLRP) GetPrivileged() bool {
	if x != nil {
		return x.Privileged
	}
	return false
}

func (x *DesiredLRP) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *DesiredLRP) GetRoutes() *ProtoRoutes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *DesiredLRP) GetLogSource() string {
	if x != nil {
		return x.LogSource
	}
	return ""
}

func (x *DesiredLRP) GetLogGuid() string {
	if x != nil {
		return x.LogGuid
	}
	return ""
}

// Deprecated: Marked as deprecated in desired_lrp.proto.
func (x *DesiredLRP) GetMetricsGuid() string {
	if x != nil {
		return x.MetricsGuid
	}
	return ""
}

func (x *DesiredLRP) GetAnnotation() string {
	if x != nil {
		return x.Annotation
	}
	return ""
}

func (x *DesiredLRP) GetEgressRules() []*SecurityGroupRule {
	if x != nil {
		return x.EgressRules
	}
	return nil
}

func (x *DesiredLRP) GetModificationTag() *ModificationTag {
	if x != nil {
		return x.ModificationTag
	}
	return nil
}

func (x *DesiredLRP) GetCachedDependencies() []*CachedDependency {
	if x != nil {
		return x.CachedDependencies
	}
	return nil
}

// Deprecated: Marked as deprecated in desired_lrp.proto.
func (x *DesiredLRP) GetLegacyDownloadUser() string {
	if x != nil {
		return x.LegacyDownloadUser
	}
	return ""
}

func (x *DesiredLRP) GetTrustedSystemCertificatesPath() string {
	if x != nil {
		return x.TrustedSystemCertificatesPath
	}
	return ""
}

func (x *DesiredLRP) GetVolumeMounts() []*VolumeMount {
	if x != nil {
		return x.VolumeMounts
	}
	return nil
}

func (x *DesiredLRP) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *DesiredLRP) GetPlacementTags() []string {
	if x != nil {
		return x.PlacementTags
	}
	return nil
}

func (x *DesiredLRP) GetMaxPids() int32 {
	if x != nil {
		return x.MaxPids
	}
	return 0
}

func (x *DesiredLRP) GetCertificateProperties() *CertificateProperties {
	if x != nil {
		return x.CertificateProperties
	}
	return nil
}

func (x *DesiredLRP) GetImageUsername() string {
	if x != nil {
		return x.ImageUsername
	}
	return ""
}

func (x *DesiredLRP) GetImagePassword() string {
	if x != nil {
		return x.ImagePassword
	}
	return ""
}

func (x *DesiredLRP) GetCheckDefinition() *CheckDefinition {
	if x != nil {
		return x.CheckDefinition
	}
	return nil
}

func (x *DesiredLRP) GetImageLayers() []*ImageLayer {
	if x != nil {
		return x.ImageLayers
	}
	return nil
}

func (x *DesiredLRP) GetMetricTags() map[string]*MetricTagValue {
	if x != nil {
		return x.MetricTags
	}
	return nil
}

func (x *DesiredLRP) GetSidecars() []*Sidecar {
	if x != nil {
		return x.Sidecars
	}
	return nil
}

func (x *DesiredLRP) GetLogRateLimit() *LogRateLimit {
	if x != nil {
		return x.LogRateLimit
	}
	return nil
}

var File_desired_lrp_proto protoreflect.FileDescriptor

var file_desired_lrp_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x72, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x1a, 0x0d, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6c, 0x6f,
	0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc1, 0x03, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4c, 0x52,
	0x50, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3d, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x72, 0x70, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4c, 0x52, 0x50, 0x4b, 0x65, 0x79, 0x52,
	0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4c, 0x72, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x14,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x72, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4c, 0x52, 0x50, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x12, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4c,
	0x72, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x42, 0x0a, 0x10, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x22, 0xe8, 0x0b, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x4c, 0x52, 0x50, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0f,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x72, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x44,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4c, 0x52, 0x50, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x4c, 0x72, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x15, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x24, 0x0a, 0x05,
	0x73, 0x65, 0x74, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x65, 0x74,
	0x75, 0x70, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x1a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x70, 0x75, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x63, 0x70, 0x75, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x05, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x00, 0x52, 0x05,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0b, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x49, 0x0a, 0x13, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x12, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x14, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x20,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x29, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x12, 0x59, 0x0a, 0x16, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x15, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x42, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0b, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x4c, 0x52, 0x50, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x08, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a,
	0x55, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x22, 0x81, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe0, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x4c, 0x52, 0x50, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x48,
	0x02, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0a,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x44, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x4c, 0x52, 0x50, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x67, 0x73, 0x1a, 0x55, 0x0a, 0x0f, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x14, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x4c, 0x52, 0x50, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4c, 0x52, 0x50,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x6d, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x62,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x66, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x69, 0x64, 0x73, 0x22, 0xae, 0x0e, 0x0a, 0x0a, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x4c, 0x52, 0x50, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x66, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x65, 0x74, 0x75,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x65, 0x74, 0x75, 0x70, 0x12, 0x26,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x1a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x15, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6e,
	0x73, 0x12, 0x28, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x6d, 0x62, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x6d, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x6d, 0x62, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0d, 0x42, 0x02, 0x10, 0x00, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x30, 0x0a,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x0b, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x67, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x49, 0x0a, 0x13, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x12, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x34, 0x0a, 0x14, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x20, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x38, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x25, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x67, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x69, 0x64, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x69, 0x64, 0x73, 0x12, 0x59, 0x0a, 0x16, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x48, 0x01, 0x52, 0x15, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x42, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0b,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x4c, 0x52, 0x50, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x2b, 0x0a, 0x08, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x73, 0x18, 0x24, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x69, 0x64, 0x65,
	0x63, 0x61, 0x72, 0x52, 0x08, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x73, 0x12, 0x3a, 0x0a,
	0x0e, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4c,
	0x6f, 0x67, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0c, 0x6c, 0x6f, 0x67,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x55, 0x0a, 0x0f, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x22, 0x5a, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x72, 0x79, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x62, 0x62, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_desired_lrp_proto_rawDescOnce sync.Once
	file_desired_lrp_proto_rawDescData = file_desired_lrp_proto_rawDesc
)

func file_desired_lrp_proto_rawDescGZIP() []byte {
	file_desired_lrp_proto_rawDescOnce.Do(func() {
		file_desired_lrp_proto_rawDescData = protoimpl.X.CompressGZIP(file_desired_lrp_proto_rawDescData)
	})
	return file_desired_lrp_proto_rawDescData
}

var file_desired_lrp_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_desired_lrp_proto_goTypes = []interface{}{
	(*DesiredLRPSchedulingInfo)(nil), // 0: models.DesiredLRPSchedulingInfo
	(*DesiredLRPRunInfo)(nil),        // 1: models.DesiredLRPRunInfo
	(*ProtoRoutes)(nil),              // 2: models.ProtoRoutes
	(*DesiredLRPUpdate)(nil),         // 3: models.DesiredLRPUpdate
	(*DesiredLRPKey)(nil),            // 4: models.DesiredLRPKey
	(*DesiredLRPResource)(nil),       // 5: models.DesiredLRPResource
	(*DesiredLRP)(nil),               // 6: models.DesiredLRP
	nil,                              // 7: models.DesiredLRPRunInfo.MetricTagsEntry
	nil,                              // 8: models.ProtoRoutes.RoutesEntry
	nil,                              // 9: models.DesiredLRPUpdate.MetricTagsEntry
	nil,                              // 10: models.DesiredLRP.MetricTagsEntry
	(*ModificationTag)(nil),          // 11: models.ModificationTag
	(*VolumePlacement)(nil),          // 12: models.VolumePlacement
	(*EnvironmentVariable)(nil),      // 13: models.EnvironmentVariable
	(*Action)(nil),                   // 14: models.Action
	(*SecurityGroupRule)(nil),        // 15: models.SecurityGroupRule
	(*CachedDependency)(nil),         // 16: models.CachedDependency
	(*VolumeMount)(nil),              // 17: models.VolumeMount
	(*Network)(nil),                  // 18: models.Network
	(*CertificateProperties)(nil),    // 19: models.CertificateProperties
	(*CheckDefinition)(nil),          // 20: models.CheckDefinition
	(*ImageLayer)(nil),               // 21: models.ImageLayer
	(*Sidecar)(nil),                  // 22: models.Sidecar
	(*LogRateLimit)(nil),             // 23: models.LogRateLimit
	(*MetricTagValue)(nil),           // 24: models.MetricTagValue
}
var file_desired_lrp_proto_depIdxs = []int32{
	4,  // 0: models.DesiredLRPSchedulingInfo.desired_lrp_key:type_name -> models.DesiredLRPKey
	5,  // 1: models.DesiredLRPSchedulingInfo.desired_lrp_resource:type_name -> models.DesiredLRPResource
	2,  // 2: models.DesiredLRPSchedulingInfo.routes:type_name -> models.ProtoRoutes
	11, // 3: models.DesiredLRPSchedulingInfo.modification_tag:type_name -> models.ModificationTag
	12, // 4: models.DesiredLRPSchedulingInfo.volume_placement:type_name -> models.VolumePlacement
	4,  // 5: models.DesiredLRPRunInfo.desired_lrp_key:type_name -> models.DesiredLRPKey
	13, // 6: models.DesiredLRPRunInfo.environment_variables:type_name -> models.EnvironmentVariable
	14, // 7: models.DesiredLRPRunInfo.setup:type_name -> models.Action
	14, // 8: models.DesiredLRPRunInfo.action:type_name -> models.Action
	14, // 9: models.DesiredLRPRunInfo.monitor:type_name -> models.Action
	15, // 10: models.DesiredLRPRunInfo.egress_rules:type_name -> models.SecurityGroupRule
	16, // 11: models.DesiredLRPRunInfo.cached_dependencies:type_name -> models.CachedDependency
	17, // 12: models.DesiredLRPRunInfo.volume_mounts:type_name -> models.VolumeMount
	18, // 13: models.DesiredLRPRunInfo.network:type_name -> models.Network
	19, // 14: models.DesiredLRPRunInfo.certificate_properties:type_name -> models.CertificateProperties
	20, // 15: models.DesiredLRPRunInfo.check_definition:type_name -> models.CheckDefinition
	21, // 16: models.DesiredLRPRunInfo.image_layers:type_name -> models.ImageLayer
	7,  // 17: models.DesiredLRPRunInfo.metric_tags:type_name -> models.DesiredLRPRunInfo.MetricTagsEntry
	22, // 18: models.DesiredLRPRunInfo.sidecars:type_name -> models.Sidecar
	23, // 19: models.DesiredLRPRunInfo.log_rate_limit:type_name -> models.LogRateLimit
	8,  // 20: models.ProtoRoutes.routes:type_name -> models.ProtoRoutes.RoutesEntry
	2,  // 21: models.DesiredLRPUpdate.routes:type_name -> models.ProtoRoutes
	9,  // 22: models.DesiredLRPUpdate.metric_tags:type_name -> models.DesiredLRPUpdate.MetricTagsEntry
	13, // 23: models.DesiredLRP.environment_variables:type_name -> models.EnvironmentVariable
	14, // 24: models.DesiredLRP.setup:type_name -> models.Action
	14, // 25: models.DesiredLRP.action:type_name -> models.Action
	14, // 26: models.DesiredLRP.monitor:type_name -> models.Action
	2,  // 27: models.DesiredLRP.routes:type_name -> models.ProtoRoutes
	15, // 28: models.DesiredLRP.egress_rules:type_name -> models.SecurityGroupRule
	11, // 29: models.DesiredLRP.modification_tag:type_name -> models.ModificationTag
	16, // 30: models.DesiredLRP.cached_dependencies:type_name -> models.CachedDependency
	17, // 31: models.DesiredLRP.volume_mounts:type_name -> models.VolumeMount
	18, // 32: models.DesiredLRP.network:type_name -> models.Network
	19, // 33: models.DesiredLRP.certificate_properties:type_name -> models.CertificateProperties
	20, // 34: models.DesiredLRP.check_definition:type_name -> models.CheckDefinition
	21, // 35: models.DesiredLRP.image_layers:type_name -> models.ImageLayer
	10, // 36: models.DesiredLRP.metric_tags:type_name -> models.DesiredLRP.MetricTagsEntry
	22, // 37: models.DesiredLRP.sidecars:type_name -> models.Sidecar
	23, // 38: models.DesiredLRP.log_rate_limit:type_name -> models.LogRateLimit
	24, // 39: models.DesiredLRPRunInfo.MetricTagsEntry.value:type_name -> models.MetricTagValue
	24, // 40: models.DesiredLRPUpdate.MetricTagsEntry.value:type_name -> models.MetricTagValue
	24, // 41: models.DesiredLRP.MetricTagsEntry.value:type_name -> models.MetricTagValue
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_desired_lrp_proto_init() }
func file_desired_lrp_proto_init() {
	if File_desired_lrp_proto != nil {
		return
	}
	file_actions_proto_init()
	file_cached_dependency_proto_init()
	file_certificate_properties_proto_init()
	file_environment_variables_proto_init()
	file_modification_tag_proto_init()
	file_network_proto_init()
	file_security_group_proto_init()
	file_volume_mount_proto_init()
	file_check_definition_proto_init()
	file_image_layer_proto_init()
	file_metric_tags_proto_init()
	file_sidecar_proto_init()
	file_log_rate_limit_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_desired_lrp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DesiredLRPSchedulingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desired_lrp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DesiredLRPRunInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desired_lrp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoRoutes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desired_lrp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DesiredLRPUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desired_lrp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DesiredLRPKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desired_lrp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DesiredLRPResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desired_lrp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DesiredLRP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_desired_lrp_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_desired_lrp_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*DesiredLRPUpdate_Instances)(nil),
		(*DesiredLRPUpdate_Annotation)(nil),
	}
	file_desired_lrp_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_desired_lrp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_desired_lrp_proto_goTypes,
		DependencyIndexes: file_desired_lrp_proto_depIdxs,
		MessageInfos:      file_desired_lrp_proto_msgTypes,
	}.Build()
	File_desired_lrp_proto = out.File
	file_desired_lrp_proto_rawDesc = nil
	file_desired_lrp_proto_goTypes = nil
	file_desired_lrp_proto_depIdxs = nil
}
