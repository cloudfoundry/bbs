// Code generated by protoc-gen-go-bbs. DO NOT EDIT.
// versions:
// - protoc-gen-go-bbs v0.0.1
// - protoc            v5.27.0--rc1
// source: task_requests.proto

package models

// Prevent copylock errors when using ProtoTaskLifecycleResponse directly
type TaskLifecycleResponse struct {
	Error *Error
}

func (x *TaskLifecycleResponse) ToProto() *ProtoTaskLifecycleResponse {
	proto := &ProtoTaskLifecycleResponse{
		Error: x.Error.ToProto(),
	}
	return proto
}

func TaskLifecycleResponseProtoMap(values []*TaskLifecycleResponse) []*ProtoTaskLifecycleResponse {
	result := make([]*ProtoTaskLifecycleResponse, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}

// Prevent copylock errors when using ProtoDesireTaskRequest directly
type DesireTaskRequest struct {
	TaskDefinition *TaskDefinition
	TaskGuid       string
	Domain         string
}

func (x *DesireTaskRequest) ToProto() *ProtoDesireTaskRequest {
	proto := &ProtoDesireTaskRequest{
		TaskDefinition: x.TaskDefinition.ToProto(),
		TaskGuid:       x.TaskGuid,
		Domain:         x.Domain,
	}
	return proto
}

func DesireTaskRequestProtoMap(values []*DesireTaskRequest) []*ProtoDesireTaskRequest {
	result := make([]*ProtoDesireTaskRequest, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}

// Prevent copylock errors when using ProtoStartTaskRequest directly
type StartTaskRequest struct {
	TaskGuid string
	CellId   string
}

func (x *StartTaskRequest) ToProto() *ProtoStartTaskRequest {
	proto := &ProtoStartTaskRequest{
		TaskGuid: x.TaskGuid,
		CellId:   x.CellId,
	}
	return proto
}

func StartTaskRequestProtoMap(values []*StartTaskRequest) []*ProtoStartTaskRequest {
	result := make([]*ProtoStartTaskRequest, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}

// Prevent copylock errors when using ProtoStartTaskResponse directly
type StartTaskResponse struct {
	Error       *Error
	ShouldStart bool
}

func (x *StartTaskResponse) ToProto() *ProtoStartTaskResponse {
	proto := &ProtoStartTaskResponse{
		Error:       x.Error.ToProto(),
		ShouldStart: x.ShouldStart,
	}
	return proto
}

func StartTaskResponseProtoMap(values []*StartTaskResponse) []*ProtoStartTaskResponse {
	result := make([]*ProtoStartTaskResponse, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}

// Prevent copylock errors when using ProtoFailTaskRequest directly
type FailTaskRequest struct {
	TaskGuid      string
	FailureReason string
}

func (x *FailTaskRequest) ToProto() *ProtoFailTaskRequest {
	proto := &ProtoFailTaskRequest{
		TaskGuid:      x.TaskGuid,
		FailureReason: x.FailureReason,
	}
	return proto
}

func FailTaskRequestProtoMap(values []*FailTaskRequest) []*ProtoFailTaskRequest {
	result := make([]*ProtoFailTaskRequest, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}

// Prevent copylock errors when using ProtoRejectTaskRequest directly
type RejectTaskRequest struct {
	TaskGuid        string
	RejectionReason string
}

func (x *RejectTaskRequest) ToProto() *ProtoRejectTaskRequest {
	proto := &ProtoRejectTaskRequest{
		TaskGuid:        x.TaskGuid,
		RejectionReason: x.RejectionReason,
	}
	return proto
}

func RejectTaskRequestProtoMap(values []*RejectTaskRequest) []*ProtoRejectTaskRequest {
	result := make([]*ProtoRejectTaskRequest, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}

// Prevent copylock errors when using ProtoTaskGuidRequest directly
type TaskGuidRequest struct {
	TaskGuid string
}

func (x *TaskGuidRequest) ToProto() *ProtoTaskGuidRequest {
	proto := &ProtoTaskGuidRequest{
		TaskGuid: x.TaskGuid,
	}
	return proto
}

func TaskGuidRequestProtoMap(values []*TaskGuidRequest) []*ProtoTaskGuidRequest {
	result := make([]*ProtoTaskGuidRequest, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}

// Prevent copylock errors when using ProtoCompleteTaskRequest directly
type CompleteTaskRequest struct {
	TaskGuid      string
	CellId        string
	Failed        bool
	FailureReason string
	Result        string
}

func (x *CompleteTaskRequest) ToProto() *ProtoCompleteTaskRequest {
	proto := &ProtoCompleteTaskRequest{
		TaskGuid:      x.TaskGuid,
		CellId:        x.CellId,
		Failed:        x.Failed,
		FailureReason: x.FailureReason,
		Result:        x.Result,
	}
	return proto
}

func CompleteTaskRequestProtoMap(values []*CompleteTaskRequest) []*ProtoCompleteTaskRequest {
	result := make([]*ProtoCompleteTaskRequest, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}

// Prevent copylock errors when using ProtoTaskCallbackResponse directly
type TaskCallbackResponse struct {
	TaskGuid      string
	Failed        bool
	FailureReason string
	Result        string
	Annotation    string
	CreatedAt     int64
}

func (x *TaskCallbackResponse) ToProto() *ProtoTaskCallbackResponse {
	proto := &ProtoTaskCallbackResponse{
		TaskGuid:      x.TaskGuid,
		Failed:        x.Failed,
		FailureReason: x.FailureReason,
		Result:        x.Result,
		Annotation:    x.Annotation,
		CreatedAt:     x.CreatedAt,
	}
	return proto
}

func TaskCallbackResponseProtoMap(values []*TaskCallbackResponse) []*ProtoTaskCallbackResponse {
	result := make([]*ProtoTaskCallbackResponse, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}

// Prevent copylock errors when using ProtoTasksRequest directly
type TasksRequest struct {
	Domain string
	CellId string
}

func (x *TasksRequest) ToProto() *ProtoTasksRequest {
	proto := &ProtoTasksRequest{
		Domain: x.Domain,
		CellId: x.CellId,
	}
	return proto
}

func TasksRequestProtoMap(values []*TasksRequest) []*ProtoTasksRequest {
	result := make([]*ProtoTasksRequest, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}

// Prevent copylock errors when using ProtoTasksResponse directly
type TasksResponse struct {
	Error *Error
	Tasks []*Task
}

func (x *TasksResponse) ToProto() *ProtoTasksResponse {
	proto := &ProtoTasksResponse{
		Error: x.Error.ToProto(),
		Tasks: TaskProtoMap(x.Tasks),
	}
	return proto
}

func TasksResponseProtoMap(values []*TasksResponse) []*ProtoTasksResponse {
	result := make([]*ProtoTasksResponse, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}

// Prevent copylock errors when using ProtoTaskByGuidRequest directly
type TaskByGuidRequest struct {
	TaskGuid string
}

func (x *TaskByGuidRequest) ToProto() *ProtoTaskByGuidRequest {
	proto := &ProtoTaskByGuidRequest{
		TaskGuid: x.TaskGuid,
	}
	return proto
}

func TaskByGuidRequestProtoMap(values []*TaskByGuidRequest) []*ProtoTaskByGuidRequest {
	result := make([]*ProtoTaskByGuidRequest, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}

// Prevent copylock errors when using ProtoTaskResponse directly
type TaskResponse struct {
	Error *Error
	Task  *Task
}

func (x *TaskResponse) ToProto() *ProtoTaskResponse {
	proto := &ProtoTaskResponse{
		Error: x.Error.ToProto(),
		Task:  x.Task.ToProto(),
	}
	return proto
}

func TaskResponseProtoMap(values []*TaskResponse) []*ProtoTaskResponse {
	result := make([]*ProtoTaskResponse, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}
