// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: actual_lrp.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProtoActualLRPNetInfo_PreferredAddress int32

const (
	ProtoActualLRPNetInfo_UNKNOWN  ProtoActualLRPNetInfo_PreferredAddress = 0
	ProtoActualLRPNetInfo_INSTANCE ProtoActualLRPNetInfo_PreferredAddress = 1
	ProtoActualLRPNetInfo_HOST     ProtoActualLRPNetInfo_PreferredAddress = 2
)

// Enum value maps for ProtoActualLRPNetInfo_PreferredAddress.
var (
	ProtoActualLRPNetInfo_PreferredAddress_name = map[int32]string{
		0: "UNKNOWN",
		1: "INSTANCE",
		2: "HOST",
	}
	ProtoActualLRPNetInfo_PreferredAddress_value = map[string]int32{
		"UNKNOWN":  0,
		"INSTANCE": 1,
		"HOST":     2,
	}
)

func (x ProtoActualLRPNetInfo_PreferredAddress) Enum() *ProtoActualLRPNetInfo_PreferredAddress {
	p := new(ProtoActualLRPNetInfo_PreferredAddress)
	*p = x
	return p
}

func (x ProtoActualLRPNetInfo_PreferredAddress) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoActualLRPNetInfo_PreferredAddress) Descriptor() protoreflect.EnumDescriptor {
	return file_actual_lrp_proto_enumTypes[0].Descriptor()
}

func (ProtoActualLRPNetInfo_PreferredAddress) Type() protoreflect.EnumType {
	return &file_actual_lrp_proto_enumTypes[0]
}

func (x ProtoActualLRPNetInfo_PreferredAddress) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoActualLRPNetInfo_PreferredAddress.Descriptor instead.
func (ProtoActualLRPNetInfo_PreferredAddress) EnumDescriptor() ([]byte, []int) {
	return file_actual_lrp_proto_rawDescGZIP(), []int{4, 0}
}

type ProtoActualLRP_Presence int32

const (
	ProtoActualLRP_ORDINARY   ProtoActualLRP_Presence = 0
	ProtoActualLRP_EVACUATING ProtoActualLRP_Presence = 1
	ProtoActualLRP_SUSPECT    ProtoActualLRP_Presence = 2
)

// Enum value maps for ProtoActualLRP_Presence.
var (
	ProtoActualLRP_Presence_name = map[int32]string{
		0: "ORDINARY",
		1: "EVACUATING",
		2: "SUSPECT",
	}
	ProtoActualLRP_Presence_value = map[string]int32{
		"ORDINARY":   0,
		"EVACUATING": 1,
		"SUSPECT":    2,
	}
)

func (x ProtoActualLRP_Presence) Enum() *ProtoActualLRP_Presence {
	p := new(ProtoActualLRP_Presence)
	*p = x
	return p
}

func (x ProtoActualLRP_Presence) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoActualLRP_Presence) Descriptor() protoreflect.EnumDescriptor {
	return file_actual_lrp_proto_enumTypes[1].Descriptor()
}

func (ProtoActualLRP_Presence) Type() protoreflect.EnumType {
	return &file_actual_lrp_proto_enumTypes[1]
}

func (x ProtoActualLRP_Presence) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoActualLRP_Presence.Descriptor instead.
func (ProtoActualLRP_Presence) EnumDescriptor() ([]byte, []int) {
	return file_actual_lrp_proto_rawDescGZIP(), []int{6, 0}
}

// Deprecated: Marked as deprecated in actual_lrp.proto.
type ProtoActualLRPGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instance      *ProtoActualLRP        `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Evacuating    *ProtoActualLRP        `protobuf:"bytes,2,opt,name=evacuating,proto3" json:"evacuating,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtoActualLRPGroup) Reset() {
	*x = ProtoActualLRPGroup{}
	mi := &file_actual_lrp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoActualLRPGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoActualLRPGroup) ProtoMessage() {}

func (x *ProtoActualLRPGroup) ProtoReflect() protoreflect.Message {
	mi := &file_actual_lrp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoActualLRPGroup.ProtoReflect.Descriptor instead.
func (*ProtoActualLRPGroup) Descriptor() ([]byte, []int) {
	return file_actual_lrp_proto_rawDescGZIP(), []int{0}
}

func (x *ProtoActualLRPGroup) GetInstance() *ProtoActualLRP {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *ProtoActualLRPGroup) GetEvacuating() *ProtoActualLRP {
	if x != nil {
		return x.Evacuating
	}
	return nil
}

type ProtoPortMapping struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ContainerPort         uint32                 `protobuf:"varint,1,opt,name=container_port,proto3" json:"container_port,omitempty"`
	HostPort              uint32                 `protobuf:"varint,2,opt,name=host_port,proto3" json:"host_port,omitempty"`
	ContainerTlsProxyPort uint32                 `protobuf:"varint,3,opt,name=container_tls_proxy_port,proto3" json:"container_tls_proxy_port,omitempty"`
	HostTlsProxyPort      uint32                 `protobuf:"varint,4,opt,name=host_tls_proxy_port,proto3" json:"host_tls_proxy_port,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ProtoPortMapping) Reset() {
	*x = ProtoPortMapping{}
	mi := &file_actual_lrp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoPortMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoPortMapping) ProtoMessage() {}

func (x *ProtoPortMapping) ProtoReflect() protoreflect.Message {
	mi := &file_actual_lrp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoPortMapping.ProtoReflect.Descriptor instead.
func (*ProtoPortMapping) Descriptor() ([]byte, []int) {
	return file_actual_lrp_proto_rawDescGZIP(), []int{1}
}

func (x *ProtoPortMapping) GetContainerPort() uint32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

func (x *ProtoPortMapping) GetHostPort() uint32 {
	if x != nil {
		return x.HostPort
	}
	return 0
}

func (x *ProtoPortMapping) GetContainerTlsProxyPort() uint32 {
	if x != nil {
		return x.ContainerTlsProxyPort
	}
	return 0
}

func (x *ProtoPortMapping) GetHostTlsProxyPort() uint32 {
	if x != nil {
		return x.HostTlsProxyPort
	}
	return 0
}

type ProtoActualLRPKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProcessGuid   string                 `protobuf:"bytes,1,opt,name=process_guid,proto3" json:"process_guid,omitempty"`
	Index         int32                  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Domain        string                 `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtoActualLRPKey) Reset() {
	*x = ProtoActualLRPKey{}
	mi := &file_actual_lrp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoActualLRPKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoActualLRPKey) ProtoMessage() {}

func (x *ProtoActualLRPKey) ProtoReflect() protoreflect.Message {
	mi := &file_actual_lrp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoActualLRPKey.ProtoReflect.Descriptor instead.
func (*ProtoActualLRPKey) Descriptor() ([]byte, []int) {
	return file_actual_lrp_proto_rawDescGZIP(), []int{2}
}

func (x *ProtoActualLRPKey) GetProcessGuid() string {
	if x != nil {
		return x.ProcessGuid
	}
	return ""
}

func (x *ProtoActualLRPKey) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ProtoActualLRPKey) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type ProtoActualLRPInstanceKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceGuid  string                 `protobuf:"bytes,1,opt,name=instance_guid,proto3" json:"instance_guid,omitempty"`
	CellId        string                 `protobuf:"bytes,2,opt,name=cell_id,proto3" json:"cell_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtoActualLRPInstanceKey) Reset() {
	*x = ProtoActualLRPInstanceKey{}
	mi := &file_actual_lrp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoActualLRPInstanceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoActualLRPInstanceKey) ProtoMessage() {}

func (x *ProtoActualLRPInstanceKey) ProtoReflect() protoreflect.Message {
	mi := &file_actual_lrp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoActualLRPInstanceKey.ProtoReflect.Descriptor instead.
func (*ProtoActualLRPInstanceKey) Descriptor() ([]byte, []int) {
	return file_actual_lrp_proto_rawDescGZIP(), []int{3}
}

func (x *ProtoActualLRPInstanceKey) GetInstanceGuid() string {
	if x != nil {
		return x.InstanceGuid
	}
	return ""
}

func (x *ProtoActualLRPInstanceKey) GetCellId() string {
	if x != nil {
		return x.CellId
	}
	return ""
}

type ProtoActualLRPNetInfo struct {
	state            protoimpl.MessageState                 `protogen:"open.v1"`
	Address          string                                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Ports            []*ProtoPortMapping                    `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports,omitempty"`
	InstanceAddress  string                                 `protobuf:"bytes,3,opt,name=instance_address,proto3" json:"instance_address,omitempty"`
	PreferredAddress ProtoActualLRPNetInfo_PreferredAddress `protobuf:"varint,4,opt,name=preferred_address,proto3,enum=models.ProtoActualLRPNetInfo_PreferredAddress" json:"preferred_address,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProtoActualLRPNetInfo) Reset() {
	*x = ProtoActualLRPNetInfo{}
	mi := &file_actual_lrp_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoActualLRPNetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoActualLRPNetInfo) ProtoMessage() {}

func (x *ProtoActualLRPNetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_actual_lrp_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoActualLRPNetInfo.ProtoReflect.Descriptor instead.
func (*ProtoActualLRPNetInfo) Descriptor() ([]byte, []int) {
	return file_actual_lrp_proto_rawDescGZIP(), []int{4}
}

func (x *ProtoActualLRPNetInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ProtoActualLRPNetInfo) GetPorts() []*ProtoPortMapping {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *ProtoActualLRPNetInfo) GetInstanceAddress() string {
	if x != nil {
		return x.InstanceAddress
	}
	return ""
}

func (x *ProtoActualLRPNetInfo) GetPreferredAddress() ProtoActualLRPNetInfo_PreferredAddress {
	if x != nil {
		return x.PreferredAddress
	}
	return ProtoActualLRPNetInfo_UNKNOWN
}

type ProtoActualLRPInternalRoute struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hostname      string                 `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtoActualLRPInternalRoute) Reset() {
	*x = ProtoActualLRPInternalRoute{}
	mi := &file_actual_lrp_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoActualLRPInternalRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoActualLRPInternalRoute) ProtoMessage() {}

func (x *ProtoActualLRPInternalRoute) ProtoReflect() protoreflect.Message {
	mi := &file_actual_lrp_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoActualLRPInternalRoute.ProtoReflect.Descriptor instead.
func (*ProtoActualLRPInternalRoute) Descriptor() ([]byte, []int) {
	return file_actual_lrp_proto_rawDescGZIP(), []int{5}
}

func (x *ProtoActualLRPInternalRoute) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type ProtoActualLRP struct {
	state                   protoimpl.MessageState         `protogen:"open.v1"`
	ActualLrpKey            *ProtoActualLRPKey             `protobuf:"bytes,1,opt,name=actual_lrp_key,json=actualLrpKey,proto3" json:"actual_lrp_key,omitempty"`
	ActualLrpInstanceKey    *ProtoActualLRPInstanceKey     `protobuf:"bytes,2,opt,name=actual_lrp_instance_key,json=actualLrpInstanceKey,proto3" json:"actual_lrp_instance_key,omitempty"`
	ActualLrpNetInfo        *ProtoActualLRPNetInfo         `protobuf:"bytes,3,opt,name=actual_lrp_net_info,json=actualLrpNetInfo,proto3" json:"actual_lrp_net_info,omitempty"`
	CrashCount              int32                          `protobuf:"varint,4,opt,name=crash_count,proto3" json:"crash_count,omitempty"`
	CrashReason             string                         `protobuf:"bytes,5,opt,name=crash_reason,proto3" json:"crash_reason,omitempty"`
	State                   string                         `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	PlacementError          string                         `protobuf:"bytes,7,opt,name=placement_error,proto3" json:"placement_error,omitempty"`
	Since                   int64                          `protobuf:"varint,8,opt,name=since,proto3" json:"since,omitempty"`
	ModificationTag         *ProtoModificationTag          `protobuf:"bytes,9,opt,name=modification_tag,proto3" json:"modification_tag,omitempty"`
	Presence                ProtoActualLRP_Presence        `protobuf:"varint,10,opt,name=presence,proto3,enum=models.ProtoActualLRP_Presence" json:"presence,omitempty"`
	ActualLrpInternalRoutes []*ProtoActualLRPInternalRoute `protobuf:"bytes,11,rep,name=actual_lrp_internal_routes,json=actualLrpInternalRoutes,proto3" json:"actual_lrp_internal_routes,omitempty"`
	MetricTags              map[string]string              `protobuf:"bytes,12,rep,name=metric_tags,proto3" json:"metric_tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Routable                *bool                          `protobuf:"varint,13,opt,name=routable,proto3,oneof" json:"routable,omitempty"`
	AvailabilityZone        string                         `protobuf:"bytes,14,opt,name=availability_zone,proto3" json:"availability_zone,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ProtoActualLRP) Reset() {
	*x = ProtoActualLRP{}
	mi := &file_actual_lrp_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoActualLRP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoActualLRP) ProtoMessage() {}

func (x *ProtoActualLRP) ProtoReflect() protoreflect.Message {
	mi := &file_actual_lrp_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoActualLRP.ProtoReflect.Descriptor instead.
func (*ProtoActualLRP) Descriptor() ([]byte, []int) {
	return file_actual_lrp_proto_rawDescGZIP(), []int{6}
}

func (x *ProtoActualLRP) GetActualLrpKey() *ProtoActualLRPKey {
	if x != nil {
		return x.ActualLrpKey
	}
	return nil
}

func (x *ProtoActualLRP) GetActualLrpInstanceKey() *ProtoActualLRPInstanceKey {
	if x != nil {
		return x.ActualLrpInstanceKey
	}
	return nil
}

func (x *ProtoActualLRP) GetActualLrpNetInfo() *ProtoActualLRPNetInfo {
	if x != nil {
		return x.ActualLrpNetInfo
	}
	return nil
}

func (x *ProtoActualLRP) GetCrashCount() int32 {
	if x != nil {
		return x.CrashCount
	}
	return 0
}

func (x *ProtoActualLRP) GetCrashReason() string {
	if x != nil {
		return x.CrashReason
	}
	return ""
}

func (x *ProtoActualLRP) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ProtoActualLRP) GetPlacementError() string {
	if x != nil {
		return x.PlacementError
	}
	return ""
}

func (x *ProtoActualLRP) GetSince() int64 {
	if x != nil {
		return x.Since
	}
	return 0
}

func (x *ProtoActualLRP) GetModificationTag() *ProtoModificationTag {
	if x != nil {
		return x.ModificationTag
	}
	return nil
}

func (x *ProtoActualLRP) GetPresence() ProtoActualLRP_Presence {
	if x != nil {
		return x.Presence
	}
	return ProtoActualLRP_ORDINARY
}

func (x *ProtoActualLRP) GetActualLrpInternalRoutes() []*ProtoActualLRPInternalRoute {
	if x != nil {
		return x.ActualLrpInternalRoutes
	}
	return nil
}

func (x *ProtoActualLRP) GetMetricTags() map[string]string {
	if x != nil {
		return x.MetricTags
	}
	return nil
}

func (x *ProtoActualLRP) GetRoutable() bool {
	if x != nil && x.Routable != nil {
		return *x.Routable
	}
	return false
}

func (x *ProtoActualLRP) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

var File_actual_lrp_proto protoreflect.FileDescriptor

var file_actual_lrp_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x72, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x1a, 0x09, 0x62, 0x62, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x01,
	0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x52, 0x50,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x52, 0x50, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x65, 0x76, 0x61,
	0x63, 0x75, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x4c, 0x52, 0x50, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x63, 0x75, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xda, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x03, 0xc0, 0x3e, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xc0, 0x3e, 0x01, 0x52,
	0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3f, 0x0a, 0x18, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xc0, 0x3e,
	0x01, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x6c, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x13, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xc0, 0x3e, 0x01, 0x52, 0x13, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x74, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x4c, 0x52, 0x50, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xc0,
	0x3e, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x03, 0xc0, 0x3e, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xc0, 0x3e, 0x01,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x65, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x52, 0x50, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xc0, 0x3e,
	0x01, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xc0, 0x3e, 0x01, 0x52, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x22,
	0x86, 0x03, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c,
	0x52, 0x50, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xc0, 0x3e, 0x01, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x42, 0x03, 0xc0, 0x3e, 0x01, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x61, 0x0a, 0x11, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x52, 0x50, 0x4e, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x03, 0xc0, 0x3e, 0x01, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x89, 0x01, 0x0a,
	0x10, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x27, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x1a,
	0x82, 0x7d, 0x17, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x1a, 0x1b, 0x82, 0x7d, 0x18, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x1a,
	0x17, 0x82, 0x7d, 0x14, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x52, 0x50, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xc0, 0x3e, 0x01, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfb, 0x07, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x52, 0x50, 0x12, 0x47, 0x0a, 0x0e, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x72, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x52, 0x50, 0x4b, 0x65, 0x79, 0x42, 0x06,
	0xc0, 0x3e, 0x01, 0x90, 0x3f, 0x01, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x72,
	0x70, 0x4b, 0x65, 0x79, 0x12, 0x60, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c,
	0x72, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x52, 0x50, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x06, 0xc0, 0x3e, 0x01, 0x90, 0x3f, 0x01,
	0x52, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x72, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x54, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x6c, 0x72, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x52, 0x50, 0x4e, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x06, 0xc0, 0x3e, 0x01, 0x90, 0x3f, 0x01, 0x52, 0x10, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x4c, 0x72, 0x70, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0b,
	0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x03, 0xc0, 0x3e, 0x01, 0x52, 0x0b, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x61, 0x73, 0x68,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xc0, 0x3e, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x05,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xc0, 0x3e, 0x01,
	0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x42,
	0x06, 0xc0, 0x3e, 0x01, 0x90, 0x3f, 0x01, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x4c, 0x52, 0x50, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x1a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x6c, 0x72, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c,
	0x52, 0x50, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x17, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x72, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x4c, 0x52, 0x50, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x24, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xc0, 0x3e, 0x01, 0x48, 0x00, 0x52, 0x08, 0x72, 0x6f, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xc0, 0x3e, 0x01, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5d, 0x0a, 0x08, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x41,
	0x52, 0x59, 0x10, 0x00, 0x1a, 0x0b, 0x82, 0x7d, 0x08, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x45, 0x56, 0x41, 0x43, 0x55, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x1a, 0x0d, 0x82, 0x7d, 0x0a, 0x45, 0x76, 0x61, 0x63, 0x75, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x17, 0x0a, 0x07, 0x53, 0x55, 0x53, 0x50, 0x45, 0x43, 0x54, 0x10, 0x02, 0x1a, 0x0a, 0x82,
	0x7d, 0x07, 0x53, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x22, 0x5a, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x72, 0x79, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x62, 0x62, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_actual_lrp_proto_rawDescOnce sync.Once
	file_actual_lrp_proto_rawDescData = file_actual_lrp_proto_rawDesc
)

func file_actual_lrp_proto_rawDescGZIP() []byte {
	file_actual_lrp_proto_rawDescOnce.Do(func() {
		file_actual_lrp_proto_rawDescData = protoimpl.X.CompressGZIP(file_actual_lrp_proto_rawDescData)
	})
	return file_actual_lrp_proto_rawDescData
}

var file_actual_lrp_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_actual_lrp_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_actual_lrp_proto_goTypes = []any{
	(ProtoActualLRPNetInfo_PreferredAddress)(0), // 0: models.ProtoActualLRPNetInfo.PreferredAddress
	(ProtoActualLRP_Presence)(0),                // 1: models.ProtoActualLRP.Presence
	(*ProtoActualLRPGroup)(nil),                 // 2: models.ProtoActualLRPGroup
	(*ProtoPortMapping)(nil),                    // 3: models.ProtoPortMapping
	(*ProtoActualLRPKey)(nil),                   // 4: models.ProtoActualLRPKey
	(*ProtoActualLRPInstanceKey)(nil),           // 5: models.ProtoActualLRPInstanceKey
	(*ProtoActualLRPNetInfo)(nil),               // 6: models.ProtoActualLRPNetInfo
	(*ProtoActualLRPInternalRoute)(nil),         // 7: models.ProtoActualLRPInternalRoute
	(*ProtoActualLRP)(nil),                      // 8: models.ProtoActualLRP
	nil,                                         // 9: models.ProtoActualLRP.MetricTagsEntry
	(*ProtoModificationTag)(nil),                // 10: models.ProtoModificationTag
}
var file_actual_lrp_proto_depIdxs = []int32{
	8,  // 0: models.ProtoActualLRPGroup.instance:type_name -> models.ProtoActualLRP
	8,  // 1: models.ProtoActualLRPGroup.evacuating:type_name -> models.ProtoActualLRP
	3,  // 2: models.ProtoActualLRPNetInfo.ports:type_name -> models.ProtoPortMapping
	0,  // 3: models.ProtoActualLRPNetInfo.preferred_address:type_name -> models.ProtoActualLRPNetInfo.PreferredAddress
	4,  // 4: models.ProtoActualLRP.actual_lrp_key:type_name -> models.ProtoActualLRPKey
	5,  // 5: models.ProtoActualLRP.actual_lrp_instance_key:type_name -> models.ProtoActualLRPInstanceKey
	6,  // 6: models.ProtoActualLRP.actual_lrp_net_info:type_name -> models.ProtoActualLRPNetInfo
	10, // 7: models.ProtoActualLRP.modification_tag:type_name -> models.ProtoModificationTag
	1,  // 8: models.ProtoActualLRP.presence:type_name -> models.ProtoActualLRP.Presence
	7,  // 9: models.ProtoActualLRP.actual_lrp_internal_routes:type_name -> models.ProtoActualLRPInternalRoute
	9,  // 10: models.ProtoActualLRP.metric_tags:type_name -> models.ProtoActualLRP.MetricTagsEntry
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_actual_lrp_proto_init() }
func file_actual_lrp_proto_init() {
	if File_actual_lrp_proto != nil {
		return
	}
	file_bbs_proto_init()
	file_modification_tag_proto_init()
	file_actual_lrp_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_actual_lrp_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_actual_lrp_proto_goTypes,
		DependencyIndexes: file_actual_lrp_proto_depIdxs,
		EnumInfos:         file_actual_lrp_proto_enumTypes,
		MessageInfos:      file_actual_lrp_proto_msgTypes,
	}.Build()
	File_actual_lrp_proto = out.File
	file_actual_lrp_proto_rawDesc = nil
	file_actual_lrp_proto_goTypes = nil
	file_actual_lrp_proto_depIdxs = nil
}
