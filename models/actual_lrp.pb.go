// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.3
// source: actual_lrp.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActualLRPNetInfo_PreferredAddress int32

const (
	ActualLRPNetInfo_UNKNOWN  ActualLRPNetInfo_PreferredAddress = 0
	ActualLRPNetInfo_INSTANCE ActualLRPNetInfo_PreferredAddress = 1
	ActualLRPNetInfo_HOST     ActualLRPNetInfo_PreferredAddress = 2
)

// Enum value maps for ActualLRPNetInfo_PreferredAddress.
var (
	ActualLRPNetInfo_PreferredAddress_name = map[int32]string{
		0: "UNKNOWN",
		1: "INSTANCE",
		2: "HOST",
	}
	ActualLRPNetInfo_PreferredAddress_value = map[string]int32{
		"UNKNOWN":  0,
		"INSTANCE": 1,
		"HOST":     2,
	}
)

func (x ActualLRPNetInfo_PreferredAddress) Enum() *ActualLRPNetInfo_PreferredAddress {
	p := new(ActualLRPNetInfo_PreferredAddress)
	*p = x
	return p
}

func (x ActualLRPNetInfo_PreferredAddress) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActualLRPNetInfo_PreferredAddress) Descriptor() protoreflect.EnumDescriptor {
	return file_actual_lrp_proto_enumTypes[0].Descriptor()
}

func (ActualLRPNetInfo_PreferredAddress) Type() protoreflect.EnumType {
	return &file_actual_lrp_proto_enumTypes[0]
}

func (x ActualLRPNetInfo_PreferredAddress) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActualLRPNetInfo_PreferredAddress.Descriptor instead.
func (ActualLRPNetInfo_PreferredAddress) EnumDescriptor() ([]byte, []int) {
	return file_actual_lrp_proto_rawDescGZIP(), []int{4, 0}
}

type ActualLRP_Presence int32

const (
	ActualLRP_ORDINARY   ActualLRP_Presence = 0
	ActualLRP_EVACUATING ActualLRP_Presence = 1
	ActualLRP_SUSPECT    ActualLRP_Presence = 2
)

// Enum value maps for ActualLRP_Presence.
var (
	ActualLRP_Presence_name = map[int32]string{
		0: "ORDINARY",
		1: "EVACUATING",
		2: "SUSPECT",
	}
	ActualLRP_Presence_value = map[string]int32{
		"ORDINARY":   0,
		"EVACUATING": 1,
		"SUSPECT":    2,
	}
)

func (x ActualLRP_Presence) Enum() *ActualLRP_Presence {
	p := new(ActualLRP_Presence)
	*p = x
	return p
}

func (x ActualLRP_Presence) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActualLRP_Presence) Descriptor() protoreflect.EnumDescriptor {
	return file_actual_lrp_proto_enumTypes[1].Descriptor()
}

func (ActualLRP_Presence) Type() protoreflect.EnumType {
	return &file_actual_lrp_proto_enumTypes[1]
}

func (x ActualLRP_Presence) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActualLRP_Presence.Descriptor instead.
func (ActualLRP_Presence) EnumDescriptor() ([]byte, []int) {
	return file_actual_lrp_proto_rawDescGZIP(), []int{6, 0}
}

// Deprecated: Marked as deprecated in actual_lrp.proto.
type ActualLRPGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance   *ActualLRP `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Evacuating *ActualLRP `protobuf:"bytes,2,opt,name=evacuating,proto3" json:"evacuating,omitempty"`
}

func (x *ActualLRPGroup) Reset() {
	*x = ActualLRPGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actual_lrp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActualLRPGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActualLRPGroup) ProtoMessage() {}

func (x *ActualLRPGroup) ProtoReflect() protoreflect.Message {
	mi := &file_actual_lrp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActualLRPGroup.ProtoReflect.Descriptor instead.
func (*ActualLRPGroup) Descriptor() ([]byte, []int) {
	return file_actual_lrp_proto_rawDescGZIP(), []int{0}
}

func (x *ActualLRPGroup) GetInstance() *ActualLRP {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *ActualLRPGroup) GetEvacuating() *ActualLRP {
	if x != nil {
		return x.Evacuating
	}
	return nil
}

type PortMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerPort         uint32 `protobuf:"varint,1,opt,name=container_port,proto3" json:"container_port,omitempty"`
	HostPort              uint32 `protobuf:"varint,2,opt,name=host_port,proto3" json:"host_port,omitempty"`
	ContainerTlsProxyPort uint32 `protobuf:"varint,3,opt,name=container_tls_proxy_port,proto3" json:"container_tls_proxy_port,omitempty"`
	HostTlsProxyPort      uint32 `protobuf:"varint,4,opt,name=host_tls_proxy_port,proto3" json:"host_tls_proxy_port,omitempty"`
}

func (x *PortMapping) Reset() {
	*x = PortMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actual_lrp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortMapping) ProtoMessage() {}

func (x *PortMapping) ProtoReflect() protoreflect.Message {
	mi := &file_actual_lrp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortMapping.ProtoReflect.Descriptor instead.
func (*PortMapping) Descriptor() ([]byte, []int) {
	return file_actual_lrp_proto_rawDescGZIP(), []int{1}
}

func (x *PortMapping) GetContainerPort() uint32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

func (x *PortMapping) GetHostPort() uint32 {
	if x != nil {
		return x.HostPort
	}
	return 0
}

func (x *PortMapping) GetContainerTlsProxyPort() uint32 {
	if x != nil {
		return x.ContainerTlsProxyPort
	}
	return 0
}

func (x *PortMapping) GetHostTlsProxyPort() uint32 {
	if x != nil {
		return x.HostTlsProxyPort
	}
	return 0
}

type ActualLRPKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessGuid string `protobuf:"bytes,1,opt,name=process_guid,proto3" json:"process_guid,omitempty"`
	Index       int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Domain      string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *ActualLRPKey) Reset() {
	*x = ActualLRPKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actual_lrp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActualLRPKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActualLRPKey) ProtoMessage() {}

func (x *ActualLRPKey) ProtoReflect() protoreflect.Message {
	mi := &file_actual_lrp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActualLRPKey.ProtoReflect.Descriptor instead.
func (*ActualLRPKey) Descriptor() ([]byte, []int) {
	return file_actual_lrp_proto_rawDescGZIP(), []int{2}
}

func (x *ActualLRPKey) GetProcessGuid() string {
	if x != nil {
		return x.ProcessGuid
	}
	return ""
}

func (x *ActualLRPKey) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ActualLRPKey) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type ActualLRPInstanceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceGuid string `protobuf:"bytes,1,opt,name=instance_guid,proto3" json:"instance_guid,omitempty"`
	CellId       string `protobuf:"bytes,2,opt,name=cell_id,proto3" json:"cell_id,omitempty"`
}

func (x *ActualLRPInstanceKey) Reset() {
	*x = ActualLRPInstanceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actual_lrp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActualLRPInstanceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActualLRPInstanceKey) ProtoMessage() {}

func (x *ActualLRPInstanceKey) ProtoReflect() protoreflect.Message {
	mi := &file_actual_lrp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActualLRPInstanceKey.ProtoReflect.Descriptor instead.
func (*ActualLRPInstanceKey) Descriptor() ([]byte, []int) {
	return file_actual_lrp_proto_rawDescGZIP(), []int{3}
}

func (x *ActualLRPInstanceKey) GetInstanceGuid() string {
	if x != nil {
		return x.InstanceGuid
	}
	return ""
}

func (x *ActualLRPInstanceKey) GetCellId() string {
	if x != nil {
		return x.CellId
	}
	return ""
}

type ActualLRPNetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address          string                            `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Ports            []*PortMapping                    `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports,omitempty"`
	InstanceAddress  string                            `protobuf:"bytes,3,opt,name=instance_address,json=instanceAddress,proto3" json:"instance_address,omitempty"`
	PreferredAddress ActualLRPNetInfo_PreferredAddress `protobuf:"varint,4,opt,name=preferred_address,proto3,enum=models.ActualLRPNetInfo_PreferredAddress" json:"preferred_address,omitempty"`
}

func (x *ActualLRPNetInfo) Reset() {
	*x = ActualLRPNetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actual_lrp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActualLRPNetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActualLRPNetInfo) ProtoMessage() {}

func (x *ActualLRPNetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_actual_lrp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActualLRPNetInfo.ProtoReflect.Descriptor instead.
func (*ActualLRPNetInfo) Descriptor() ([]byte, []int) {
	return file_actual_lrp_proto_rawDescGZIP(), []int{4}
}

func (x *ActualLRPNetInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ActualLRPNetInfo) GetPorts() []*PortMapping {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *ActualLRPNetInfo) GetInstanceAddress() string {
	if x != nil {
		return x.InstanceAddress
	}
	return ""
}

func (x *ActualLRPNetInfo) GetPreferredAddress() ActualLRPNetInfo_PreferredAddress {
	if x != nil {
		return x.PreferredAddress
	}
	return ActualLRPNetInfo_UNKNOWN
}

type ActualLRPInternalRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *ActualLRPInternalRoute) Reset() {
	*x = ActualLRPInternalRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actual_lrp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActualLRPInternalRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActualLRPInternalRoute) ProtoMessage() {}

func (x *ActualLRPInternalRoute) ProtoReflect() protoreflect.Message {
	mi := &file_actual_lrp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActualLRPInternalRoute.ProtoReflect.Descriptor instead.
func (*ActualLRPInternalRoute) Descriptor() ([]byte, []int) {
	return file_actual_lrp_proto_rawDescGZIP(), []int{5}
}

func (x *ActualLRPInternalRoute) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type ActualLRP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActualLrpKey            *ActualLRPKey             `protobuf:"bytes,1,opt,name=actual_lrp_key,json=actualLrpKey,proto3" json:"actual_lrp_key,omitempty"`
	ActualLrpInstanceKey    *ActualLRPInstanceKey     `protobuf:"bytes,2,opt,name=actual_lrp_instance_key,json=actualLrpInstanceKey,proto3" json:"actual_lrp_instance_key,omitempty"`
	ActualLrpNetInfo        *ActualLRPNetInfo         `protobuf:"bytes,3,opt,name=actual_lrp_net_info,json=actualLrpNetInfo,proto3" json:"actual_lrp_net_info,omitempty"`
	CrashCount              int32                     `protobuf:"varint,4,opt,name=crash_count,proto3" json:"crash_count,omitempty"`
	CrashReason             string                    `protobuf:"bytes,5,opt,name=crash_reason,json=crashReason,proto3" json:"crash_reason,omitempty"`
	State                   string                    `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	PlacementError          string                    `protobuf:"bytes,7,opt,name=placement_error,json=placementError,proto3" json:"placement_error,omitempty"`
	Since                   int64                     `protobuf:"varint,8,opt,name=since,proto3" json:"since,omitempty"`
	ModificationTag         *ModificationTag          `protobuf:"bytes,9,opt,name=modification_tag,proto3" json:"modification_tag,omitempty"`
	Presence                ActualLRP_Presence        `protobuf:"varint,10,opt,name=presence,proto3,enum=models.ActualLRP_Presence" json:"presence,omitempty"`
	ActualLrpInternalRoutes []*ActualLRPInternalRoute `protobuf:"bytes,11,rep,name=actual_lrp_internal_routes,json=actualLrpInternalRoutes,proto3" json:"actual_lrp_internal_routes,omitempty"`
	MetricTags              map[string]string         `protobuf:"bytes,12,rep,name=metric_tags,json=metricTags,proto3" json:"metric_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to OptionalRoutable:
	//
	//	*ActualLRP_Routable
	OptionalRoutable isActualLRP_OptionalRoutable `protobuf_oneof:"optional_routable"`
	AvailabilityZone string                       `protobuf:"bytes,14,opt,name=availability_zone,proto3" json:"availability_zone,omitempty"`
}

func (x *ActualLRP) Reset() {
	*x = ActualLRP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actual_lrp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActualLRP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActualLRP) ProtoMessage() {}

func (x *ActualLRP) ProtoReflect() protoreflect.Message {
	mi := &file_actual_lrp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActualLRP.ProtoReflect.Descriptor instead.
func (*ActualLRP) Descriptor() ([]byte, []int) {
	return file_actual_lrp_proto_rawDescGZIP(), []int{6}
}

func (x *ActualLRP) GetActualLrpKey() *ActualLRPKey {
	if x != nil {
		return x.ActualLrpKey
	}
	return nil
}

func (x *ActualLRP) GetActualLrpInstanceKey() *ActualLRPInstanceKey {
	if x != nil {
		return x.ActualLrpInstanceKey
	}
	return nil
}

func (x *ActualLRP) GetActualLrpNetInfo() *ActualLRPNetInfo {
	if x != nil {
		return x.ActualLrpNetInfo
	}
	return nil
}

func (x *ActualLRP) GetCrashCount() int32 {
	if x != nil {
		return x.CrashCount
	}
	return 0
}

func (x *ActualLRP) GetCrashReason() string {
	if x != nil {
		return x.CrashReason
	}
	return ""
}

func (x *ActualLRP) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ActualLRP) GetPlacementError() string {
	if x != nil {
		return x.PlacementError
	}
	return ""
}

func (x *ActualLRP) GetSince() int64 {
	if x != nil {
		return x.Since
	}
	return 0
}

func (x *ActualLRP) GetModificationTag() *ModificationTag {
	if x != nil {
		return x.ModificationTag
	}
	return nil
}

func (x *ActualLRP) GetPresence() ActualLRP_Presence {
	if x != nil {
		return x.Presence
	}
	return ActualLRP_ORDINARY
}

func (x *ActualLRP) GetActualLrpInternalRoutes() []*ActualLRPInternalRoute {
	if x != nil {
		return x.ActualLrpInternalRoutes
	}
	return nil
}

func (x *ActualLRP) GetMetricTags() map[string]string {
	if x != nil {
		return x.MetricTags
	}
	return nil
}

func (m *ActualLRP) GetOptionalRoutable() isActualLRP_OptionalRoutable {
	if m != nil {
		return m.OptionalRoutable
	}
	return nil
}

func (x *ActualLRP) GetRoutable() bool {
	if x, ok := x.GetOptionalRoutable().(*ActualLRP_Routable); ok {
		return x.Routable
	}
	return false
}

func (x *ActualLRP) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

type isActualLRP_OptionalRoutable interface {
	isActualLRP_OptionalRoutable()
}

type ActualLRP_Routable struct {
	Routable bool `protobuf:"varint,13,opt,name=routable,proto3,oneof"`
}

func (*ActualLRP_Routable) isActualLRP_OptionalRoutable() {}

var File_actual_lrp_proto protoreflect.FileDescriptor

var file_actual_lrp_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x72, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x1a, 0x16, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x76, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x52, 0x50, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x2d, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x52, 0x50, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x65, 0x76, 0x61, 0x63, 0x75, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x52, 0x50, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x63,
	0x75, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xc1, 0x01, 0x0a, 0x0b, 0x50,
	0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x3a, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x6c,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x6c,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x13,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x74, 0x6c, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x60,
	0x0a, 0x0c, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x52, 0x50, 0x4b, 0x65, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x22, 0x56, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x52, 0x50, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0x94, 0x02, 0x0a, 0x10, 0x41, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x4c, 0x52, 0x50, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a,
	0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x52, 0x50, 0x4e, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x37, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x22,
	0x34, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x52, 0x50, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf4, 0x06, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x4c, 0x52, 0x50, 0x12, 0x3a, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x72,
	0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x52, 0x50, 0x4b, 0x65,
	0x79, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x72, 0x70, 0x4b, 0x65, 0x79, 0x12,
	0x53, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x72, 0x70, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x4c, 0x52, 0x50, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x14,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x72, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c,
	0x72, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x4c, 0x52, 0x50, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x4c, 0x72, 0x70, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x12, 0x36, 0x0a, 0x08,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x52,
	0x50, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x1a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c,
	0x72, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x52, 0x50, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x17, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x4c, 0x72, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x52, 0x50, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x35, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x4f, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x56,
	0x41, 0x43, 0x55, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x53, 0x50, 0x45, 0x43, 0x54, 0x10, 0x02, 0x42, 0x13, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x22, 0x5a, 0x20,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x72,
	0x79, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x62, 0x62, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_actual_lrp_proto_rawDescOnce sync.Once
	file_actual_lrp_proto_rawDescData = file_actual_lrp_proto_rawDesc
)

func file_actual_lrp_proto_rawDescGZIP() []byte {
	file_actual_lrp_proto_rawDescOnce.Do(func() {
		file_actual_lrp_proto_rawDescData = protoimpl.X.CompressGZIP(file_actual_lrp_proto_rawDescData)
	})
	return file_actual_lrp_proto_rawDescData
}

var file_actual_lrp_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_actual_lrp_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_actual_lrp_proto_goTypes = []interface{}{
	(ActualLRPNetInfo_PreferredAddress)(0), // 0: models.ActualLRPNetInfo.PreferredAddress
	(ActualLRP_Presence)(0),                // 1: models.ActualLRP.Presence
	(*ActualLRPGroup)(nil),                 // 2: models.ActualLRPGroup
	(*PortMapping)(nil),                    // 3: models.PortMapping
	(*ActualLRPKey)(nil),                   // 4: models.ActualLRPKey
	(*ActualLRPInstanceKey)(nil),           // 5: models.ActualLRPInstanceKey
	(*ActualLRPNetInfo)(nil),               // 6: models.ActualLRPNetInfo
	(*ActualLRPInternalRoute)(nil),         // 7: models.ActualLRPInternalRoute
	(*ActualLRP)(nil),                      // 8: models.ActualLRP
	nil,                                    // 9: models.ActualLRP.MetricTagsEntry
	(*ModificationTag)(nil),                // 10: models.ModificationTag
}
var file_actual_lrp_proto_depIdxs = []int32{
	8,  // 0: models.ActualLRPGroup.instance:type_name -> models.ActualLRP
	8,  // 1: models.ActualLRPGroup.evacuating:type_name -> models.ActualLRP
	3,  // 2: models.ActualLRPNetInfo.ports:type_name -> models.PortMapping
	0,  // 3: models.ActualLRPNetInfo.preferred_address:type_name -> models.ActualLRPNetInfo.PreferredAddress
	4,  // 4: models.ActualLRP.actual_lrp_key:type_name -> models.ActualLRPKey
	5,  // 5: models.ActualLRP.actual_lrp_instance_key:type_name -> models.ActualLRPInstanceKey
	6,  // 6: models.ActualLRP.actual_lrp_net_info:type_name -> models.ActualLRPNetInfo
	10, // 7: models.ActualLRP.modification_tag:type_name -> models.ModificationTag
	1,  // 8: models.ActualLRP.presence:type_name -> models.ActualLRP.Presence
	7,  // 9: models.ActualLRP.actual_lrp_internal_routes:type_name -> models.ActualLRPInternalRoute
	9,  // 10: models.ActualLRP.metric_tags:type_name -> models.ActualLRP.MetricTagsEntry
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_actual_lrp_proto_init() }
func file_actual_lrp_proto_init() {
	if File_actual_lrp_proto != nil {
		return
	}
	file_modification_tag_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_actual_lrp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActualLRPGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actual_lrp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actual_lrp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActualLRPKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actual_lrp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActualLRPInstanceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actual_lrp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActualLRPNetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actual_lrp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActualLRPInternalRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actual_lrp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActualLRP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_actual_lrp_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ActualLRP_Routable)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_actual_lrp_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_actual_lrp_proto_goTypes,
		DependencyIndexes: file_actual_lrp_proto_depIdxs,
		EnumInfos:         file_actual_lrp_proto_enumTypes,
		MessageInfos:      file_actual_lrp_proto_msgTypes,
	}.Build()
	File_actual_lrp_proto = out.File
	file_actual_lrp_proto_rawDesc = nil
	file_actual_lrp_proto_goTypes = nil
	file_actual_lrp_proto_depIdxs = nil
}
