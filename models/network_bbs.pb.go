// Code generated by protoc-gen-go-bbs. DO NOT EDIT.
// versions:
// - protoc-gen-go-bbs v0.0.1
// - protoc            v5.29.3
// source: network.proto

package models

// Prevent copylock errors when using ProtoNetwork directly
type Network struct {
	Properties map[string]string `json:"properties,omitempty"`
}

func (this *Network) Equal(that interface{}) bool {

	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Network)
	if !ok {
		that2, ok := that.(Network)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}

	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}

	if this.Properties == nil {
		if that1.Properties != nil {
			return false
		}
	} else if len(this.Properties) != len(that1.Properties) {
		return false
	}
	for i := range this.Properties {
		if this.Properties[i] != that1.Properties[i] {
			return false
		}
	}
	return true
}
func (m *Network) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}
func (m *Network) SetProperties(value map[string]string) {
	if m != nil {
		m.Properties = value
	}
}
func (x *Network) ToProto() *ProtoNetwork {
	if x == nil {
		return nil
	}

	proto := &ProtoNetwork{
		Properties: x.Properties,
	}
	return proto
}

func (x *ProtoNetwork) FromProto() *Network {
	if x == nil {
		return nil
	}

	copysafe := &Network{
		Properties: x.Properties,
	}
	return copysafe
}

func NetworkToProtoSlice(values []*Network) []*ProtoNetwork {
	if values == nil {
		return nil
	}
	result := make([]*ProtoNetwork, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}

func NetworkFromProtoSlice(values []*ProtoNetwork) []*Network {
	if values == nil {
		return nil
	}
	result := make([]*Network, len(values))
	for i, val := range values {
		result[i] = val.FromProto()
	}
	return result
}
