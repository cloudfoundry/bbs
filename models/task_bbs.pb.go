// Code generated by protoc-gen-go-bbs. DO NOT EDIT.
// versions:
// - protoc-gen-go-bbs v0.0.1
// - protoc            v5.27.0--rc1
// source: task.proto

package models

// Prevent copylock errors when using ProtoTaskDefinition directly
type TaskDefinition struct {
	RootFs                        string
	EnvironmentVariables          []*EnvironmentVariable
	Action                        *Action
	DiskMb                        int32
	MemoryMb                      int32
	CpuWeight                     uint32
	Privileged                    bool
	LogSource                     string
	LogGuid                       string
	MetricsGuid                   string
	ResultFile                    string
	CompletionCallbackUrl         string
	Annotation                    string
	EgressRules                   []*SecurityGroupRule
	CachedDependencies            []*CachedDependency
	LegacyDownloadUser            string
	TrustedSystemCertificatesPath string
	VolumeMounts                  []*VolumeMount
	Network                       *Network
	PlacementTags                 []string
	MaxPids                       int32
	CertificateProperties         *CertificateProperties
	ImageUsername                 string
	ImagePassword                 string
	ImageLayers                   []*ImageLayer
	LogRateLimit                  *LogRateLimit
	MetricTags                    map[string]*ProtoMetricTagValue
}

func (x *TaskDefinition) ToProto() *ProtoTaskDefinition {
	proto := &ProtoTaskDefinition{
		RootFs:                        x.RootFs,
		EnvironmentVariables:          EnvironmentVariableProtoMap(x.EnvironmentVariables),
		Action:                        x.Action.ToProto(),
		DiskMb:                        x.DiskMb,
		MemoryMb:                      x.MemoryMb,
		CpuWeight:                     x.CpuWeight,
		Privileged:                    x.Privileged,
		LogSource:                     x.LogSource,
		LogGuid:                       x.LogGuid,
		MetricsGuid:                   x.MetricsGuid,
		ResultFile:                    x.ResultFile,
		CompletionCallbackUrl:         x.CompletionCallbackUrl,
		Annotation:                    x.Annotation,
		EgressRules:                   SecurityGroupRuleProtoMap(x.EgressRules),
		CachedDependencies:            CachedDependencyProtoMap(x.CachedDependencies),
		LegacyDownloadUser:            x.LegacyDownloadUser,
		TrustedSystemCertificatesPath: x.TrustedSystemCertificatesPath,
		VolumeMounts:                  VolumeMountProtoMap(x.VolumeMounts),
		Network:                       x.Network.ToProto(),
		PlacementTags:                 x.PlacementTags,
		MaxPids:                       x.MaxPids,
		CertificateProperties:         x.CertificateProperties.ToProto(),
		ImageUsername:                 x.ImageUsername,
		ImagePassword:                 x.ImagePassword,
		ImageLayers:                   ImageLayerProtoMap(x.ImageLayers),
		LogRateLimit:                  x.LogRateLimit.ToProto(),
		MetricTags:                    x.MetricTags,
	}
	return proto
}

func TaskDefinitionProtoMap(values []*TaskDefinition) []*ProtoTaskDefinition {
	result := make([]*ProtoTaskDefinition, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}

type Task_State int32

const (
	Task_Invalid   Task_State = 0
	Task_Pending   Task_State = 1
	Task_Running   Task_State = 2
	Task_Completed Task_State = 3
	Task_Resolving Task_State = 4
)

// Prevent copylock errors when using ProtoTask directly
type Task struct {
	TaskDefinition   *TaskDefinition
	TaskGuid         string
	Domain           string
	CreatedAt        int64
	UpdatedAt        int64
	FirstCompletedAt int64
	State            Task_State
	CellId           string
	Result           string
	Failed           bool
	FailureReason    string
	RejectionCount   int32
	RejectionReason  string
}

func (x *Task) ToProto() *ProtoTask {
	proto := &ProtoTask{
		TaskDefinition:   x.TaskDefinition.ToProto(),
		TaskGuid:         x.TaskGuid,
		Domain:           x.Domain,
		CreatedAt:        x.CreatedAt,
		UpdatedAt:        x.UpdatedAt,
		FirstCompletedAt: x.FirstCompletedAt,
		State:            ProtoTask_State(x.State),
		CellId:           x.CellId,
		Result:           x.Result,
		Failed:           x.Failed,
		FailureReason:    x.FailureReason,
		RejectionCount:   x.RejectionCount,
		RejectionReason:  x.RejectionReason,
	}
	return proto
}

func TaskProtoMap(values []*Task) []*ProtoTask {
	result := make([]*ProtoTask, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}
