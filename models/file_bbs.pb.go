// Code generated by protoc-gen-go-bbs. DO NOT EDIT.
// versions:
// - protoc-gen-go-bbs v0.0.1
// - protoc            v6.31.1
// source: file.proto

package models

// Prevent copylock errors when using ProtoFile directly
type File struct {
	Path    string `json:"path,omitempty"`
	Content string `json:"content,omitempty"`
}

func (this *File) Equal(that interface{}) bool {

	if that == nil {
		return this == nil
	}

	that1, ok := that.(*File)
	if !ok {
		that2, ok := that.(File)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}

	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}

	if this.Path != that1.Path {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	return true
}
func (m *File) GetPath() string {
	if m != nil {
		return m.Path
	}
	var defaultValue string
	defaultValue = ""
	return defaultValue
}
func (m *File) SetPath(value string) {
	if m != nil {
		m.Path = value
	}
}
func (m *File) GetContent() string {
	if m != nil {
		return m.Content
	}
	var defaultValue string
	defaultValue = ""
	return defaultValue
}
func (m *File) SetContent(value string) {
	if m != nil {
		m.Content = value
	}
}
func (x *File) ToProto() *ProtoFile {
	if x == nil {
		return nil
	}

	proto := &ProtoFile{
		Path:    x.Path,
		Content: x.Content,
	}
	return proto
}

func (x *ProtoFile) FromProto() *File {
	if x == nil {
		return nil
	}

	copysafe := &File{
		Path:    x.Path,
		Content: x.Content,
	}
	return copysafe
}

func FileToProtoSlice(values []*File) []*ProtoFile {
	if values == nil {
		return nil
	}
	result := make([]*ProtoFile, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}

func FileFromProtoSlice(values []*ProtoFile) []*File {
	if values == nil {
		return nil
	}
	result := make([]*File, len(values))
	for i, val := range values {
		result[i] = val.FromProto()
	}
	return result
}
