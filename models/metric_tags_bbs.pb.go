// Code generated by protoc-gen-go-bbs. DO NOT EDIT.
// versions:
// - protoc-gen-go-bbs v0.0.1
// - protoc            v5.29.3
// source: metric_tags.proto

package models

import (
	strconv "strconv"
)

type MetricTagValue_DynamicValue int32

const (
	MetricTagValue_DynamicValueInvalid               MetricTagValue_DynamicValue = 0
	MetricTagValue_MetricTagDynamicValueIndex        MetricTagValue_DynamicValue = 1
	MetricTagValue_MetricTagDynamicValueInstanceGuid MetricTagValue_DynamicValue = 2
)

// Enum value maps for MetricTagValue_DynamicValue
var (
	MetricTagValue_DynamicValue_name = map[int32]string{
		0: "DynamicValueInvalid",
		1: "INDEX",
		2: "INSTANCE_GUID",
	}
	MetricTagValue_DynamicValue_value = map[string]int32{
		"DynamicValueInvalid": 0,
		"INDEX":               1,
		"INSTANCE_GUID":       2,
	}
)

func (m MetricTagValue_DynamicValue) String() string {
	s, ok := MetricTagValue_DynamicValue_name[int32(m)]
	if ok {
		return s
	}
	return strconv.Itoa(int(m))
}

// Prevent copylock errors when using ProtoMetricTagValue directly
type MetricTagValue struct {
	Static  string                      `json:"static,omitempty"`
	Dynamic MetricTagValue_DynamicValue `json:"dynamic,omitempty"`
}

func (this *MetricTagValue) Equal(that interface{}) bool {

	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricTagValue)
	if !ok {
		that2, ok := that.(MetricTagValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}

	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}

	if this.Static != that1.Static {
		return false
	}
	if this.Dynamic != that1.Dynamic {
		return false
	}
	return true
}
func (m *MetricTagValue) GetStatic() string {
	if m != nil {
		return m.Static
	}
	var defaultValue string
	defaultValue = ""
	return defaultValue
}
func (m *MetricTagValue) SetStatic(value string) {
	if m != nil {
		m.Static = value
	}
}
func (m *MetricTagValue) GetDynamic() MetricTagValue_DynamicValue {
	if m != nil {
		return m.Dynamic
	}
	var defaultValue MetricTagValue_DynamicValue
	defaultValue = 0
	return defaultValue
}
func (m *MetricTagValue) SetDynamic(value MetricTagValue_DynamicValue) {
	if m != nil {
		m.Dynamic = value
	}
}
func (x *MetricTagValue) ToProto() *ProtoMetricTagValue {
	if x == nil {
		return nil
	}

	proto := &ProtoMetricTagValue{
		Static:  x.Static,
		Dynamic: ProtoMetricTagValue_DynamicValue(x.Dynamic),
	}
	return proto
}

func (x *ProtoMetricTagValue) FromProto() *MetricTagValue {
	if x == nil {
		return nil
	}

	copysafe := &MetricTagValue{
		Static:  x.Static,
		Dynamic: MetricTagValue_DynamicValue(x.Dynamic),
	}
	return copysafe
}

func MetricTagValueToProtoSlice(values []*MetricTagValue) []*ProtoMetricTagValue {
	if values == nil {
		return nil
	}
	result := make([]*ProtoMetricTagValue, len(values))
	for i, val := range values {
		result[i] = val.ToProto()
	}
	return result
}

func MetricTagValueFromProtoSlice(values []*ProtoMetricTagValue) []*MetricTagValue {
	if values == nil {
		return nil
	}
	result := make([]*MetricTagValue, len(values))
	for i, val := range values {
		result[i] = val.FromProto()
	}
	return result
}
