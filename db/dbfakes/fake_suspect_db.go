// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/bbs/db"
	"code.cloudfoundry.org/bbs/models"
	lager "code.cloudfoundry.org/lager/v3"
)

type FakeSuspectDB struct {
	PromoteSuspectActualLRPStub        func(context.Context, lager.Logger, string, int32) (*models.ActualLRP, *models.ActualLRP, *models.ActualLRP, error)
	promoteSuspectActualLRPMutex       sync.RWMutex
	promoteSuspectActualLRPArgsForCall []struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 string
		arg4 int32
	}
	promoteSuspectActualLRPReturns struct {
		result1 *models.ActualLRP
		result2 *models.ActualLRP
		result3 *models.ActualLRP
		result4 error
	}
	promoteSuspectActualLRPReturnsOnCall map[int]struct {
		result1 *models.ActualLRP
		result2 *models.ActualLRP
		result3 *models.ActualLRP
		result4 error
	}
	RemoveSuspectActualLRPStub        func(context.Context, lager.Logger, *models.ActualLRPKey) (*models.ActualLRP, error)
	removeSuspectActualLRPMutex       sync.RWMutex
	removeSuspectActualLRPArgsForCall []struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 *models.ActualLRPKey
	}
	removeSuspectActualLRPReturns struct {
		result1 *models.ActualLRP
		result2 error
	}
	removeSuspectActualLRPReturnsOnCall map[int]struct {
		result1 *models.ActualLRP
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSuspectDB) PromoteSuspectActualLRP(arg1 context.Context, arg2 lager.Logger, arg3 string, arg4 int32) (*models.ActualLRP, *models.ActualLRP, *models.ActualLRP, error) {
	fake.promoteSuspectActualLRPMutex.Lock()
	ret, specificReturn := fake.promoteSuspectActualLRPReturnsOnCall[len(fake.promoteSuspectActualLRPArgsForCall)]
	fake.promoteSuspectActualLRPArgsForCall = append(fake.promoteSuspectActualLRPArgsForCall, struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 string
		arg4 int32
	}{arg1, arg2, arg3, arg4})
	stub := fake.PromoteSuspectActualLRPStub
	fakeReturns := fake.promoteSuspectActualLRPReturns
	fake.recordInvocation("PromoteSuspectActualLRP", []interface{}{arg1, arg2, arg3, arg4})
	fake.promoteSuspectActualLRPMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4
}

func (fake *FakeSuspectDB) PromoteSuspectActualLRPCallCount() int {
	fake.promoteSuspectActualLRPMutex.RLock()
	defer fake.promoteSuspectActualLRPMutex.RUnlock()
	return len(fake.promoteSuspectActualLRPArgsForCall)
}

func (fake *FakeSuspectDB) PromoteSuspectActualLRPCalls(stub func(context.Context, lager.Logger, string, int32) (*models.ActualLRP, *models.ActualLRP, *models.ActualLRP, error)) {
	fake.promoteSuspectActualLRPMutex.Lock()
	defer fake.promoteSuspectActualLRPMutex.Unlock()
	fake.PromoteSuspectActualLRPStub = stub
}

func (fake *FakeSuspectDB) PromoteSuspectActualLRPArgsForCall(i int) (context.Context, lager.Logger, string, int32) {
	fake.promoteSuspectActualLRPMutex.RLock()
	defer fake.promoteSuspectActualLRPMutex.RUnlock()
	argsForCall := fake.promoteSuspectActualLRPArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSuspectDB) PromoteSuspectActualLRPReturns(result1 *models.ActualLRP, result2 *models.ActualLRP, result3 *models.ActualLRP, result4 error) {
	fake.promoteSuspectActualLRPMutex.Lock()
	defer fake.promoteSuspectActualLRPMutex.Unlock()
	fake.PromoteSuspectActualLRPStub = nil
	fake.promoteSuspectActualLRPReturns = struct {
		result1 *models.ActualLRP
		result2 *models.ActualLRP
		result3 *models.ActualLRP
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeSuspectDB) PromoteSuspectActualLRPReturnsOnCall(i int, result1 *models.ActualLRP, result2 *models.ActualLRP, result3 *models.ActualLRP, result4 error) {
	fake.promoteSuspectActualLRPMutex.Lock()
	defer fake.promoteSuspectActualLRPMutex.Unlock()
	fake.PromoteSuspectActualLRPStub = nil
	if fake.promoteSuspectActualLRPReturnsOnCall == nil {
		fake.promoteSuspectActualLRPReturnsOnCall = make(map[int]struct {
			result1 *models.ActualLRP
			result2 *models.ActualLRP
			result3 *models.ActualLRP
			result4 error
		})
	}
	fake.promoteSuspectActualLRPReturnsOnCall[i] = struct {
		result1 *models.ActualLRP
		result2 *models.ActualLRP
		result3 *models.ActualLRP
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeSuspectDB) RemoveSuspectActualLRP(arg1 context.Context, arg2 lager.Logger, arg3 *models.ActualLRPKey) (*models.ActualLRP, error) {
	fake.removeSuspectActualLRPMutex.Lock()
	ret, specificReturn := fake.removeSuspectActualLRPReturnsOnCall[len(fake.removeSuspectActualLRPArgsForCall)]
	fake.removeSuspectActualLRPArgsForCall = append(fake.removeSuspectActualLRPArgsForCall, struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 *models.ActualLRPKey
	}{arg1, arg2, arg3})
	stub := fake.RemoveSuspectActualLRPStub
	fakeReturns := fake.removeSuspectActualLRPReturns
	fake.recordInvocation("RemoveSuspectActualLRP", []interface{}{arg1, arg2, arg3})
	fake.removeSuspectActualLRPMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSuspectDB) RemoveSuspectActualLRPCallCount() int {
	fake.removeSuspectActualLRPMutex.RLock()
	defer fake.removeSuspectActualLRPMutex.RUnlock()
	return len(fake.removeSuspectActualLRPArgsForCall)
}

func (fake *FakeSuspectDB) RemoveSuspectActualLRPCalls(stub func(context.Context, lager.Logger, *models.ActualLRPKey) (*models.ActualLRP, error)) {
	fake.removeSuspectActualLRPMutex.Lock()
	defer fake.removeSuspectActualLRPMutex.Unlock()
	fake.RemoveSuspectActualLRPStub = stub
}

func (fake *FakeSuspectDB) RemoveSuspectActualLRPArgsForCall(i int) (context.Context, lager.Logger, *models.ActualLRPKey) {
	fake.removeSuspectActualLRPMutex.RLock()
	defer fake.removeSuspectActualLRPMutex.RUnlock()
	argsForCall := fake.removeSuspectActualLRPArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSuspectDB) RemoveSuspectActualLRPReturns(result1 *models.ActualLRP, result2 error) {
	fake.removeSuspectActualLRPMutex.Lock()
	defer fake.removeSuspectActualLRPMutex.Unlock()
	fake.RemoveSuspectActualLRPStub = nil
	fake.removeSuspectActualLRPReturns = struct {
		result1 *models.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeSuspectDB) RemoveSuspectActualLRPReturnsOnCall(i int, result1 *models.ActualLRP, result2 error) {
	fake.removeSuspectActualLRPMutex.Lock()
	defer fake.removeSuspectActualLRPMutex.Unlock()
	fake.RemoveSuspectActualLRPStub = nil
	if fake.removeSuspectActualLRPReturnsOnCall == nil {
		fake.removeSuspectActualLRPReturnsOnCall = make(map[int]struct {
			result1 *models.ActualLRP
			result2 error
		})
	}
	fake.removeSuspectActualLRPReturnsOnCall[i] = struct {
		result1 *models.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeSuspectDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.promoteSuspectActualLRPMutex.RLock()
	defer fake.promoteSuspectActualLRPMutex.RUnlock()
	fake.removeSuspectActualLRPMutex.RLock()
	defer fake.removeSuspectActualLRPMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSuspectDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.SuspectDB = new(FakeSuspectDB)
